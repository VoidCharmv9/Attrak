@page "/"
@using AttrackSharedClass.Models
@using Microsoft.Extensions.Http
@using ScannerMaui.Services

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject AuthService AuthService
<PageTitle>Teacher Login - Attrak</PageTitle>

<style>
    .main-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }

    .auth-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 20px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 500px;
    }

    .form-control {
        font-size: 16px;
        padding: 12px 15px;
        border: 2px solid #dee2e6;
        border-radius: 10px;
        background-color: white;
        transition: border-color 0.3s ease;
        /* Optimize for Android keyboard performance */
        -webkit-appearance: none;
        -webkit-tap-highlight-color: transparent;
        will-change: transform;
        transform: translateZ(0);
        backface-visibility: hidden;
    }

        .form-control:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
            outline: none;
            /* Prevent keyboard lag on Android 14 */
            -webkit-user-select: text;
            user-select: text;
        }

    .form-select {
        font-size: 16px;
        padding: 12px 15px;
        border: 2px solid #dee2e6;
        border-radius: 10px;
        background-color: white;
        transition: border-color 0.3s ease;
    }

        .form-select:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
            outline: none;
        }

    .btn-primary, .btn-success {
        padding: 12px 30px;
        font-size: 16px;
        border-radius: 10px;
        border: none;
        transition: all 0.3s ease;
    }

        .btn-primary:hover {
            background-color: #0b5ed7;
            transform: translateY(-2px);
        }

        .btn-success:hover {
            background-color: #198754;
            transform: translateY(-2px);
        }

    /* Mobile responsive */
    @@media (max-width: 768px) {
        .main-container

    {
        padding: 10px;
    }

    .auth-card {
        margin: 10px;
    }

    .form-control, .form-select {
        font-size: 16px;
        min-height: 44px;
    }

    }

    .logo-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 1rem;
    }

    .logo-container img {
        max-width: 100%;
        height: auto;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }</style>

<!-- Main Content Container -->
<div class="main-container">
    <div class="auth-card p-4">
        <div class="text-center mb-4">
            <div class="mb-3">
                <i class="fas fa-check-circle fa-3x text-primary"></i>
            </div>
            <h2 class="fw-bold text-primary">SARDO-TRAKCARE</h2>
            <p class="text-muted">Teacher Portal </p>
        </div>


        <!-- Login Form -->
        <EditForm Model="loginRequest" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label for="username" class="form-label">
                        <i class="fas fa-user me-2"></i>Username
                    </label>
                    <InputText id="username" 
                               class="form-control" 
                               @bind-Value="loginRequest.Username"
                               placeholder="Enter your username"
                               autocomplete="username"
                               inputmode="text" />
                    <ValidationMessage For="@(() => loginRequest.Username)" class="text-danger" />
                </div>

                <div class="mb-4">
                    <label for="password" class="form-label">
                        <i class="fas fa-lock me-2"></i>Password
                    </label>
                    <InputText id="password" 
                               type="password" 
                               class="form-control" 
                               @bind-Value="loginRequest.Password"
                               placeholder="Enter your password"
                               autocomplete="current-password"
                               inputmode="text" />
                    <ValidationMessage For="@(() => loginRequest.Password)" class="text-danger" />
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }

                <div class="d-grid">
                    <button type="submit" class="btn btn-primary" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Logging in...</span>
                        }
                        else
                        {
                            <i class="fas fa-sign-in-alt me-2"></i>
                            <span>Login</span>
                        }
                    </button>
                </div>
            </EditForm>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        // No initialization needed for login-only page
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Optimize for Android 14 keyboard performance
            await Task.Delay(100); // Small delay to ensure DOM is ready
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleLogin()
    {
        if (isLoading) return;

        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var httpClient = HttpClientFactory.CreateClient("AttrakAPI");
            var response = await httpClient.PostAsJsonAsync("api/auth/login", loginRequest);

            var responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Response Status: {response.StatusCode}");
            Console.WriteLine($"Response Content: {responseContent}");

            if (response.IsSuccessStatusCode)
            {
                if (responseContent.TrimStart().StartsWith("{"))
                {
                    var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                    if (result?.Success == true && result.User != null)
                    {
                        AuthService.SetCurrentUser(result.User);
                        Navigation.NavigateTo("/qr-scanner");
                    }
                    else
                    {
                        errorMessage = result?.Message ?? "Login failed";
                    }
                }
                else
                {
                    errorMessage = "Server returned invalid response format";
                }
            }
            else
            {
                if (responseContent.TrimStart().StartsWith("{"))
                {
                    var errorResult = await response.Content.ReadFromJsonAsync<LoginResponse>();
                    errorMessage = errorResult?.Message ?? "Login failed";
                }
                else
                {
                    errorMessage = $"Server error: {response.StatusCode} - {responseContent}";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred during login: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

}