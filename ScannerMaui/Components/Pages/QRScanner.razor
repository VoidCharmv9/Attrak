@page "/qr-scanner"
@using AttrackSharedClass.Models
@using Microsoft.Extensions.Http
@using ScannerMaui.Services
@using Microsoft.JSInterop
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject IJSRuntime JSRuntime
@inject ScannerMaui.Services.QRScannerService QRScannerService
@implements IDisposable

<PageTitle>QR Scanner - Attrak</PageTitle>


<div class="container-fluid vh-100 d-flex flex-column bg-light">
    <!-- Header -->
    <div class="row bg-primary text-white p-2">
        <div class="col-12 text-center">
            <h5 class="mb-1">Attendance Scanner</h5>
            @if (currentTeacher != null)
            {
                <div class="small">
                    <span class="text-light">
                        <i class="fas fa-user"></i> @currentTeacher.FullName
                    </span>
                    @if (!string.IsNullOrEmpty(currentTeacher.SchoolName) && currentTeacher.SchoolName != "Loading...")
                    {
                        <span class="text-light opacity-75 ms-2">
                            <i class="fas fa-school"></i> @currentTeacher.SchoolName
                        </span>
                    }
                </div>
            }
        </div>
    </div>

    <!-- Attendance Type Selection -->
    <div class="row p-2">
        <div class="col-12">
            <div class="card">
                <div class="card-header py-2">
                    <h6 class="mb-0">
                        <i class="fas fa-clock me-2"></i>Attendance Type
                    </h6>
                </div>
                <div class="card-body py-3">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <button class="btn btn-success btn-lg w-100 @(attendanceType == "TimeIn" ? "active" : "")" @onclick="@(() => SetAttendanceType("TimeIn"))">
                                <i class="fas fa-sign-in-alt me-2"></i>Time In
                            </button>
                        </div>
                        <div class="col-md-6 mb-3">
                            <button class="btn btn-warning btn-lg w-100 @(attendanceType == "TimeOut" ? "active" : "")" @onclick="@(() => SetAttendanceType("TimeOut"))">
                                <i class="fas fa-sign-out-alt me-2"></i>Time Out
                            </button>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(attendanceType))
                    {
                        <div class="alert alert-info mb-0">
                            <div class="row align-items-center">
                                <div class="col">
                                    <h6 class="mb-1">
                                        <i class="fas fa-check-circle text-success me-2"></i>@(attendanceType == "TimeIn" ? "Time In" : "Time Out") Mode
                                    </h6>
                                    <p class="mb-0 small">
                                        <span class="badge bg-primary me-1">@DateTime.Now.ToString("HH:mm:ss")</span>
                                        <span class="badge bg-info">@DateTime.Now.ToString("MMM dd, yyyy")</span>
                                    </p>
                                </div>
                                <div class="col-auto">
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="ClearAttendanceType">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Scanner Section -->
    @if (!string.IsNullOrEmpty(attendanceType))
    {
        <div class="row p-2 flex-grow-1">
            <div class="col-12">
                <div class="card h-100">
                    <div class="card-header py-2">
                        <div class="d-flex justify-content-between align-items-center flex-wrap">
                            <h6 class="mb-0">
                                <i class="fas fa-qrcode me-2"></i>Scan Student QR Code
                            </h6>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="ClearAttendanceType">
                                <i class="fas fa-exchange-alt me-1"></i>Switch Mode
                            </button>
                        </div>
                        <div class="mt-2">
                            <div class="d-flex flex-wrap gap-1">
                                <span class="badge @(attendanceType == "TimeIn" ? "bg-success" : "bg-warning")">@(attendanceType == "TimeIn" ? "Time In" : "Time Out")</span>
                                <span class="badge bg-primary">@DateTime.Now.ToString("HH:mm:ss")</span>
                                <span class="badge bg-info">@DateTime.Now.ToString("MMM dd, yyyy")</span>
                            </div>
                            <div class="mt-2">
                                <small class="text-muted">
                                    <i class="fas fa-info-circle me-1"></i>
                                    @if (attendanceType == "TimeOut")
                                    {
                                        <text>7:30-12:00 = Half Day | 12:00-4:30 = Half Day | 7:30-4:30 = Whole Day | Late after 7:31 AM</text>
                                    }
                                    else
                                    {
                                        <text>Scan student QR code to mark Time In (Late after 7:31 AM)</text>
                                    }
                                </small>
                            </div>
                        </div>
                    </div>
                    <div class="card-body d-flex flex-column py-2">
                        <!-- QR Scanner Component -->
                        <div class="scanner-container flex-grow-1 bg-light rounded mb-3 d-flex align-items-center justify-content-center" style="min-height: 250px;">
                            @if (isScanning)
                            {
                                <div class="text-center">
                                    <!-- Scanning Animation -->
                                    <div class="mb-4">
                                        <div class="scanner-animation">
                                            <i class="fas fa-qrcode fa-4x text-success"></i>
                                            <div class="scanning-line"></div>
                                        </div>
                                    </div>
                                    
                                    <!-- Scanning Status -->
                                    <h5 class="mb-3 text-success">Scanning...</h5>
                                    
                                    <!-- Description -->
                                    <p class="mb-4 text-muted">Point camera at student QR code</p>
                                    
                                    <!-- Current Time Info -->
                                    <div class="alert alert-info py-2 mb-3">
                                        <small>
                                            <i class="fas fa-info-circle me-1"></i>
                                            <strong>Current Time:</strong> @DateTime.Now.ToString("HH:mm:ss")<br/>
                                            <strong>Date:</strong> @DateTime.Now.ToString("MMM dd, yyyy")<br/>
                                            @if (attendanceType == "TimeOut")
                                            {
                                                <text><strong>Time Out Rules:</strong><br/>
                                                7:30-12:00 = Half Day<br/>
                                                12:00-4:30 = Half Day<br/>
                                                7:30-4:30 = Whole Day<br/>
                                                Late after 7:31 AM</text>
                                            }
                                            else
                                            {
                                                <text><strong>Time In Rules:</strong><br/>
                                                Late after 7:31 AM</text>
                                            }
                                        </small>
                                    </div>
                                    
                                    <!-- Stop Scanning Button -->
                                    <button class="btn btn-danger btn-lg px-3 py-2 w-100" @onclick="StopScanning">
                                        <i class="fas fa-stop me-2"></i>Stop Scanning
                                    </button>
                                </div>
                            }
                            else if (isProcessing)
                            {
                                <div class="text-center">
                                    <!-- Processing Animation -->
                                    <div class="mb-4">
                                        <div class="spinner-border text-primary" style="width: 4rem; height: 4rem;" role="status">
                                            <span class="visually-hidden">Processing...</span>
                                        </div>
                                    </div>
                                    
                                    <!-- Processing Status -->
                                    <h5 class="mb-3 text-primary">Processing...</h5>
                                    
                                    <!-- Description -->
                                    <p class="mb-4 text-muted">Validating student information</p>
                                </div>
                            }
                            else if (lastScanResult != null)
                            {
                                <div class="text-center">
                                    <!-- Success/Error Feedback -->
                                    <div class="mb-4">
                                        @if (lastScanResult.IsValid)
                                        {
                                            <i class="fas fa-check-circle fa-4x text-success"></i>
                                        }
                                        else
                                        {
                                            <i class="fas fa-times-circle fa-4x text-danger"></i>
                                        }
                                    </div>
                                    
                                    <!-- Result Status -->
                                    <h5 class="mb-3 @(lastScanResult.IsValid ? "text-success" : "text-danger")">
                                        @(lastScanResult.IsValid ? "Success!" : "Error")
                                    </h5>
                                    
                                    <!-- Student Info -->
                                    <p class="mb-2 text-dark">@lastScanResult.StudentName</p>
                                    <p class="mb-4 text-muted">@lastScanResult.Message</p>
                                    
                                    <!-- Continue Scanning Button -->
                                    <button class="btn btn-primary btn-lg px-3 py-2 w-100" @onclick="ContinueScanning">
                                        <i class="fas fa-qrcode me-2"></i>Continue Scanning
                                    </button>
                                </div>
                            }
                            else
                            {
                                <div class="text-center">
                                    <!-- QR Code Icon -->
                                    <div class="mb-4">
                                        <i class="fas fa-qrcode fa-4x text-primary"></i>
                                    </div>
                                    
                                    <!-- Title -->
                                    <h5 class="mb-3 text-dark">QR Code Scanner</h5>
                                    
                                    <!-- Description -->
                                    <p class="mb-4 text-muted">Start continuous scanning for student attendance</p>
                                    
                                    <!-- Start Scanning Button -->
                                    <button class="btn btn-success btn-lg px-3 py-2 w-100" @onclick="StartContinuousScanning">
                                        <i class="fas fa-play me-2"></i>Start Scanning
                                    </button>
                                </div>
                            }
                        </div>

                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Student Information Display -->
    @if (showStudentInfo && scannedStudentInfo != null)
    {
        <div class="row p-2">
            <div class="col-12">
                <div class="card border-primary">
                    <div class="card-header bg-primary text-white py-2">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">
                                <i class="fas fa-user-graduate me-2"></i>Student Information
                            </h6>
                            <button class="btn btn-sm btn-outline-light" @onclick="CloseStudentInfo">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body py-3">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <h5 class="text-primary mb-2">@scannedStudentInfo.FullName</h5>
                                    <p class="mb-1">
                                        <strong>Student ID:</strong> @scannedStudentInfo.StudentId
                                    </p>
                                    <p class="mb-1">
                                        <strong>Grade:</strong> @scannedStudentInfo.GradeLevel
                                    </p>
                                    <p class="mb-1">
                                        <strong>Section:</strong> @scannedStudentInfo.Section
                                    </p>
                                    @if (!string.IsNullOrEmpty(scannedStudentInfo.Strand))
                                    {
                                        <p class="mb-1">
                                            <strong>Strand:</strong> @scannedStudentInfo.Strand
                                        </p>
                                    }
                                    <p class="mb-0">
                                        <strong>School:</strong> @scannedStudentInfo.SchoolName
                                    </p>
                                </div>
                            </div>
                            <div class="col-md-6">
                                @if (!string.IsNullOrEmpty(scannedStudentInfo.QRCodeData))
                                {
                                    <div class="text-center">
                                        <h6 class="mb-2">QR Code</h6>
                                        <img src="data:image/png;base64,@scannedStudentInfo.QRCodeData" 
                                             alt="Student QR Code" 
                                             class="img-fluid" 
                                             style="max-width: 150px; max-height: 150px;" />
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-12 text-center">
                                <button class="btn btn-success btn-lg me-2" @onclick="MarkAttendanceForStudent">
                                    <i class="fas fa-check-circle me-2"></i>Mark Attendance
                                </button>
                                <button class="btn btn-secondary btn-lg" @onclick="CloseStudentInfo">
                                    <i class="fas fa-times me-2"></i>Close
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Attendance List -->
    @if (attendanceList?.Any() == true)
    {
        <div class="row p-2">
            <div class="col-12">
                <div class="card">
                    <div class="card-header py-2">
                        <div class="d-flex justify-content-between align-items-center flex-wrap">
                            <h6 class="mb-0">
                                <i class="fas fa-list me-2"></i>Today's Attendance (@GetUniqueAttendanceRecords().Count)
                            </h6>
                        <button class="btn btn-sm btn-outline-primary" @onclick="ExportAttendance">
                                <i class="fas fa-download me-1"></i>Export
                        </button>
                        </div>
                    </div>
                    <div class="card-body py-2">
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Student ID</th>
                                        <th>Name</th>
                                        <th>Type</th>
                                        <th>Time</th>
                                        <th>Status</th>
                                        <th>Remarks</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var attendance in GetUniqueAttendanceRecords().OrderByDescending(a => a.Timestamp))
                                    {
                                        <tr class="@(attendance.IsValid ? "table-success" : "table-danger")">
                                            <td>@attendance.StudentId</td>
                                            <td>@attendance.StudentName</td>
                                            <td>
                                                <span class="badge @(attendance.AttendanceType == "TimeIn" ? "bg-primary" : "bg-warning")">
                                                    @(attendance.AttendanceType == "TimeIn" ? "Time In" : "Time Out")
                                                </span>
                                            </td>
                                            <td>@attendance.Timestamp.ToString("HH:mm:ss")</td>
                                            <td>
                                                @if (attendance.IsValid)
                                                {
                                                    <span class="badge @(attendance.Status switch {
                                                        "Present" => "bg-success",
                                                        "Late" => "bg-warning",
                                                        "Absent" => "bg-danger",
                                                        _ => "bg-success"
                                                    })">@attendance.Status</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">Not Enrolled</span>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(attendance.Remarks))
                                                {
                                                    <span class="badge @(attendance.Remarks switch {
                                                        "Whole Day" => "bg-success",
                                                        "Half Day" => "bg-warning",
                                                        _ => "bg-info"
                                                    })">@attendance.Remarks</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Messages -->
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="row p-2">
            <div class="col-12">
                <div class="alert @(isSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show py-2" role="alert">
                    <small>@message</small>
                    <button type="button" class="btn-close btn-close-sm" @onclick="() => message = string.Empty"></button>
                </div>
            </div>
        </div>
    }

    <!-- Toast/Snackbar for Camera Status -->
    @if (showToast)
    {
        <div class="position-fixed top-0 start-50 translate-middle-x" style="z-index: 1050; margin-top: 20px;">
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header bg-success text-white">
                    <i class="fas fa-camera me-2"></i>
                    <strong class="me-auto">Camera</strong>
                    <small>now</small>
                </div>
                <div class="toast-body bg-light">
                    @toastMessage
                </div>
            </div>
        </div>
    }
</div>

<style>
    .scanner-animation {
        position: relative;
        display: inline-block;
    }
    
    .scanning-line {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, transparent, #28a745, transparent);
        animation: scanning 2s linear infinite;
    }
    
    @@keyframes scanning {
        0% { transform: translateY(0); }
        100% { transform: translateY(4rem); }
    }
    
    .success-flash {
        animation: successFlash 0.5s ease-in-out;
    }
    
    @@keyframes successFlash {
        0% { background-color: transparent; }
        50% { background-color: rgba(40, 167, 69, 0.3); }
        100% { background-color: transparent; }
    }
    
    /* Mobile-friendly styles */
    @@media (max-width: 768px) {
        .scanner-container {
            min-height: 200px !important;
        }
        
        .btn-lg {
            padding: 0.75rem 1rem;
            font-size: 1rem;
        }
        
        .form-select-lg {
            padding: 0.75rem 1rem;
            font-size: 1rem;
        }
        
        .card-body {
            padding: 1rem !important;
        }
        
        .card-header {
            padding: 0.75rem 1rem !important;
        }
        
        .badge {
            font-size: 0.75rem;
        }
        
        .table-responsive {
            font-size: 0.875rem;
        }
    }
    
    /* Extra small devices */
    @@media (max-width: 576px) {
        .container-fluid {
            padding-left: 0.5rem;
            padding-right: 0.5rem;
        }
        
        .row {
            margin-left: -0.25rem;
            margin-right: -0.25rem;
        }
        
        .col-12 {
            padding-left: 0.25rem;
            padding-right: 0.25rem;
        }
        
        .scanner-container {
            min-height: 180px !important;
        }
        
        .btn-lg {
            padding: 0.5rem 0.75rem;
            font-size: 0.9rem;
        }
    }
</style>

<script>
    window.playBeepSound = function() {
        try {
            // Create a simple beep sound using Web Audio API
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.setValueAtTime(800, audioContext.currentTime); // 800Hz beep
            oscillator.type = 'sine';
            
            gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2);
            
            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + 0.2);
        } catch (error) {
            console.log('Could not play beep sound:', error);
        }
    };
</script>

@code {
    private string message = string.Empty;
    private bool isSuccess = false;
    private List<AttendanceRecord> attendanceList = new();
    private TeacherInfo? currentTeacher;
    private bool showToast = false;
    private string toastMessage = string.Empty;
    private string attendanceType = string.Empty;
    private string currentStudentId = string.Empty;
    
    // Continuous scanning variables
    private bool isScanning = false;
    private bool isProcessing = false;
    private AttendanceRecord? lastScanResult = null;
    private StudentDisplayInfo? scannedStudentInfo = null;
    private bool showStudentInfo = false;
    
    // Timer for updating current time display
    private Timer? timeUpdateTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentTeacher();
        
        // Subscribe to QR code scanned events
        QRScannerService.QRCodeScanned += OnQRCodeScanned;
        
        // Start timer to update current time display every second
        timeUpdateTimer = new Timer(async _ => await InvokeAsync(StateHasChanged), null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }
    
    public void Dispose()
    {
        // Unsubscribe from events
        QRScannerService.QRCodeScanned -= OnQRCodeScanned;
        
        // Dispose timer
        timeUpdateTimer?.Dispose();
    }

    private async Task LoadCurrentTeacher()
    {
        try
        {
            var user = await AuthService.GetCurrentUserAsync();
            
            // If no user found, redirect to login
            if (user == null || user.UserType != UserType.Teacher || string.IsNullOrEmpty(user.TeacherId))
            {
                Navigation.NavigateTo("/");
                return;
            }

            // Load full teacher information from API
            var httpClient = HttpClientFactory.CreateClient("AttrakAPI");
            var response = await httpClient.GetFromJsonAsync<TeacherInfo>($"api/teachersubject/teacher-info/{user.TeacherId}");
            
            if (response != null)
            {
                currentTeacher = response;
            }
            else
            {
                // Fallback to basic info from user
                currentTeacher = new TeacherInfo
                {
                    TeacherId = user.TeacherId,
                    FullName = user.Username,
                    Email = user.Email,
                    SchoolName = "Unknown School",
                    SchoolId = "" // Will be set when we get proper teacher info
                };
            }
        }
        catch (Exception ex)
        {
            message = $"Error loading teacher info: {ex.Message}";
            isSuccess = false;
            
            // Fallback to basic info
            var user = await AuthService.GetCurrentUserAsync();
            if (user != null && user.UserType == UserType.Teacher)
            {
                currentTeacher = new TeacherInfo
                {
                    TeacherId = user.TeacherId ?? "",
                    FullName = user.Username,
                    Email = user.Email,
                    SchoolName = "Error loading school",
                    SchoolId = ""
                };
            }
        }
    }




    private void SetAttendanceType(string type)
    {
        attendanceType = type;
        attendanceList.Clear();
        message = string.Empty;
        StateHasChanged();
    }

    private void ClearAttendanceType()
    {
        attendanceType = string.Empty;
        attendanceList.Clear();
        message = string.Empty;
        StateHasChanged();
    }


    private async Task LoadTodayAttendance()
    {
        try
        {
            if (currentTeacher == null) 
            {
                System.Diagnostics.Debug.WriteLine("LoadTodayAttendance: currentTeacher is null");
                return;
            }

            System.Diagnostics.Debug.WriteLine($"LoadTodayAttendance: Loading for teacher {currentTeacher.TeacherId}");
            
            var httpClient = HttpClientFactory.CreateClient("AttrakAPI");
            var response = await httpClient.GetFromJsonAsync<List<AttendanceRecord>>(
                $"api/attendance/today/{currentTeacher.TeacherId}");
            
            if (response != null)
            {
                attendanceList = response;
                System.Diagnostics.Debug.WriteLine($"LoadTodayAttendance: Loaded {response.Count} records for teacher {currentTeacher.TeacherId}");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("LoadTodayAttendance: Response is null");
                attendanceList = new List<AttendanceRecord>();
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error loading today's attendance: {ex.Message}");
            attendanceList = new List<AttendanceRecord>();
        }
    }




    private async Task ProcessStudentQRCode(string studentId)
    {
        try
        {
            if (string.IsNullOrEmpty(attendanceType) || currentTeacher == null) return;

            // Set current student ID for remarks calculation
            currentStudentId = studentId;

            // First, reload today's attendance to get the latest data
            await LoadTodayAttendance();

            // Check for existing attendance
            var today = DateTime.Today;
            var hasTimeIn = attendanceList.Any(a => 
                a.StudentId == studentId && 
                a.AttendanceType == "TimeIn" && 
                a.Timestamp.Date == today);
            var hasTimeOut = attendanceList.Any(a => 
                a.StudentId == studentId && 
                a.AttendanceType == "TimeOut" && 
                a.Timestamp.Date == today);

            // Validate attendance logic
            if (attendanceType == "TimeIn" && hasTimeIn)
            {
                lastScanResult = new AttendanceRecord
                {
                    StudentId = studentId,
                    StudentName = "Student",
                    Timestamp = DateTime.Now,
                    IsValid = false,
                    Status = "Already Time In",
                    AttendanceType = "TimeIn",
                    Message = "Student already has Time In for today."
                };
                message = "Student already has Time In for today.";
                isSuccess = false;
                StateHasChanged();
                return;
            }

            if (attendanceType == "TimeOut" && hasTimeOut)
            {
                lastScanResult = new AttendanceRecord
                {
                    StudentId = studentId,
                    StudentName = "Student",
                    Timestamp = DateTime.Now,
                    IsValid = false,
                    Status = "Already Time Out",
                    AttendanceType = "TimeOut",
                    Message = "Student already has Time Out for today."
                };
                message = "Student already has Time Out for today.";
                isSuccess = false;
                StateHasChanged();
                return;
            }

            if (attendanceType == "TimeOut" && !hasTimeIn)
            {
                lastScanResult = new AttendanceRecord
                {
                    StudentId = studentId,
                    StudentName = "Student",
                    Timestamp = DateTime.Now,
                    IsValid = false,
                    Status = "No Time In",
                    AttendanceType = "TimeOut",
                    Message = "Student must have Time In before Time Out."
                };
                message = "Student must have Time In before Time Out.";
                isSuccess = false;
                StateHasChanged();
                return;
            }

            // Set processing state
            isProcessing = true;
            isScanning = false;
            StateHasChanged();

            var currentTime = DateTime.Now;
            var remarks = DetermineRemarks(currentTime);
            
            System.Diagnostics.Debug.WriteLine($"Sending attendance request with timestamp: {currentTime:yyyy-MM-dd HH:mm:ss}");
            
            var httpClient = HttpClientFactory.CreateClient("AttrakAPI");
            var request = new AttendanceRequest
            {
                StudentId = studentId,
                TeacherId = currentTeacher.TeacherId,
                SchoolId = currentTeacher.SchoolId ?? "",
                Timestamp = currentTime,
                AttendanceType = attendanceType,
                Remarks = remarks
            };

            var response = await httpClient.PostAsJsonAsync("api/attendance/mark", request);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<AttendanceResponse>();
                if (result?.Success == true)
                {
                    // Reload attendance list to get the latest data from server
                    await LoadTodayAttendance();
                    
                    // Create a temporary record for display feedback
                    var feedbackRecord = new AttendanceRecord
                    {
                        StudentId = studentId,
                        StudentName = result.StudentName ?? "Unknown",
                        Timestamp = DateTime.Now,
                        IsValid = result.IsValid,
                        Status = result.Status,
                        AttendanceType = result.AttendanceType,
                        Message = result.Message
                    };
                    
                    lastScanResult = feedbackRecord;
                    
                    // Play success sound and show green feedback
                    if (result.IsValid)
                    {
                        await PlaySuccessSound();
                        message = GetAttendanceMessage(result);
                        isSuccess = true;
                    }
                    else
                    {
                        message = result.Message ?? "Failed to mark attendance";
                        isSuccess = false;
                    }
                }
                else
                {
                    lastScanResult = new AttendanceRecord
                    {
                        StudentId = studentId,
                        StudentName = "Unknown",
                        Timestamp = DateTime.Now,
                        IsValid = false,
                        Status = "Error",
                        AttendanceType = "Unknown",
                        Message = result?.Message ?? "Failed to mark attendance"
                    };
                    message = result?.Message ?? "Failed to mark attendance";
                    isSuccess = false;
                }
            }
            else
            {
                lastScanResult = new AttendanceRecord
                {
                    StudentId = studentId,
                    StudentName = "Unknown",
                    Timestamp = DateTime.Now,
                    IsValid = false,
                    Status = "Error",
                    AttendanceType = "Unknown",
                    Message = "Error marking attendance"
                };
                message = "Error marking attendance";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            lastScanResult = new AttendanceRecord
            {
                StudentId = studentId,
                StudentName = "Unknown",
                Timestamp = DateTime.Now,
                IsValid = false,
                Status = "Error",
                AttendanceType = "Unknown",
                Message = $"Error: {ex.Message}"
            };
            message = $"Error: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task PlaySuccessSound()
    {
        try
        {
            // Play a success beep sound
            await JSRuntime.InvokeVoidAsync("playBeepSound");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error playing success sound: {ex.Message}");
        }
    }

    private string DetermineRemarks(DateTime currentTime)
    {
        if (attendanceType == "TimeOut")
        {
            // Find the Time In record for this student today
            var today = DateTime.Today;
            var timeInRecord = attendanceList.FirstOrDefault(a => 
                a.StudentId == currentStudentId && 
                a.AttendanceType == "TimeIn" && 
                a.Timestamp.Date == today);
            
            if (timeInRecord != null)
            {
                var timeIn = timeInRecord.Timestamp;
                var timeOut = currentTime;
                
                // Check if Time In was late (after 7:31 AM)
                var sevenThirtyOne = new TimeSpan(7, 31, 0); // 7:31 AM
                var isLate = timeIn.TimeOfDay >= sevenThirtyOne;
                
                // Determine remarks based on time ranges
                var timeInHour = timeIn.TimeOfDay.Hours;
                var timeOutHour = timeOut.TimeOfDay.Hours;
                
                string dayType;
                
                // Check if it's a whole day (7:30 AM - 4:30 PM range)
                if (timeInHour <= 7 && timeOutHour >= 16) // 7:30 AM to 4:30 PM
                {
                    dayType = "Whole Day";
                }
                else
                {
                    // All other combinations are Half Day
                    dayType = "Half Day";
                }
                
                return isLate ? $"Late - {dayType}" : dayType;
            }
            else
            {
                // No Time In found, just use time-based logic as fallback
                var timeOfDay = currentTime.TimeOfDay;
                var noon = new TimeSpan(12, 0, 0); // 12:00 PM
                
                if (timeOfDay < noon)
                {
                    return "Half Day";
                }
                else
                {
                    return "Whole Day";
                }
            }
        }
        
        return ""; // No remarks for Time In
    }

    private string GetAttendanceMessage(AttendanceResponse result)
    {
        if (!result.IsValid)
        {
            return result.Message;
        }
        
        var typeText = result.AttendanceType switch
        {
            "TimeIn" => "Time In",
            "TimeOut" => "Time Out",
            _ => "Attendance"
        };
        
        var remarksText = !string.IsNullOrEmpty(result.Remarks) ? $" ({result.Remarks})" : "";
        
        return $"{typeText} marked: {result.StudentName}{remarksText}";
    }


    private void ExportAttendance()
    {
        // TODO: Implement attendance export functionality
        message = "Export functionality coming soon!";
        isSuccess = true;
        StateHasChanged();
    }

    private List<AttendanceRecord> GetUniqueAttendanceRecords()
    {
        // Group by StudentId and AttendanceType, then take the latest record for each combination
        var uniqueRecords = attendanceList
            .GroupBy(a => new { a.StudentId, a.AttendanceType })
            .Select(g => g.OrderByDescending(a => a.Timestamp).First())
            .ToList();
        
        return uniqueRecords;
    }

    private async void OnQRCodeScanned(object? sender, string qrCode)
    {
        if (!string.IsNullOrEmpty(qrCode))
        {
            await ShowStudentInfo(qrCode);
        }
    }

    private async Task OpenTimeInCamera()
    {
        await OpenNativeCamera("TimeIn");
    }

    private async Task OpenTimeOutCamera()
    {
        await OpenNativeCamera("TimeOut");
    }

    private async Task StartContinuousScanning()
    {
        try
        {
            isScanning = true;
            lastScanResult = null;
            StateHasChanged();
            
            // Show toast message
            toastMessage = "Starting continuous scanning...";
            showToast = true;
            StateHasChanged();
            
            System.Diagnostics.Debug.WriteLine("Starting continuous QR scanning");
            
            // Start the native QR scanner in continuous mode
            await QRScannerService.OpenNativeQRScanner();
            
            System.Diagnostics.Debug.WriteLine("QRScannerService.OpenNativeQRScanner() completed successfully");
            
            // Hide toast after 3 seconds
            await Task.Delay(3000);
            showToast = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error starting continuous scanning: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"Stack trace: {ex.StackTrace}");
            toastMessage = $"Error starting scanner: {ex.Message}";
            showToast = true;
            isScanning = false;
            StateHasChanged();
            
            // Hide error toast after 5 seconds
            await Task.Delay(5000);
            showToast = false;
            StateHasChanged();
        }
    }

    private void StopScanning()
    {
        isScanning = false;
        isProcessing = false;
        lastScanResult = null;
        StateHasChanged();
    }

    private async Task ContinueScanning()
    {
        lastScanResult = null;
        await StartContinuousScanning();
    }

    private async Task ShowStudentInfo(string studentId)
    {
        try
        {
            isScanning = false;
            isProcessing = true;
            StateHasChanged();

            // Fetch student information from API
            var httpClient = HttpClientFactory.CreateClient("AttrakAPI");
            var response = await httpClient.GetFromJsonAsync<StudentDisplayInfo>($"api/register/student-info/{studentId}");

            if (response != null && response.IsValid)
            {
                scannedStudentInfo = response;
                showStudentInfo = true;
                message = $"Student information loaded: {response.FullName}";
                isSuccess = true;
            }
            else
            {
                scannedStudentInfo = new StudentDisplayInfo
                {
                    StudentId = studentId,
                    FullName = "Unknown Student",
                    GradeLevel = 0,
                    Section = "Unknown",
                    SchoolName = "Unknown School",
                    IsValid = false,
                    Message = "Student not found in database"
                };
                showStudentInfo = true;
                message = "Student not found in database";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            scannedStudentInfo = new StudentDisplayInfo
            {
                StudentId = studentId,
                FullName = "Error",
                GradeLevel = 0,
                Section = "Error",
                SchoolName = "Error",
                IsValid = false,
                Message = $"Error loading student information: {ex.Message}"
            };
            showStudentInfo = true;
            message = $"Error loading student information: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void CloseStudentInfo()
    {
        showStudentInfo = false;
        scannedStudentInfo = null;
        message = string.Empty;
        StateHasChanged();
    }

    private async Task MarkAttendanceForStudent()
    {
        if (scannedStudentInfo == null) return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            await ProcessStudentQRCode(scannedStudentInfo.StudentId);
            
            // Close student info after marking attendance
            CloseStudentInfo();
        }
        catch (Exception ex)
        {
            message = $"Error marking attendance: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task OpenNativeCamera(string type)
    {
        try
        {
            attendanceType = type;
            
            // Show toast message based on type
            var typeText = type == "TimeIn" ? "Time In" : "Time Out";
            toastMessage = $"Opening camera for {typeText}...";
            showToast = true;
            StateHasChanged();
            
            System.Diagnostics.Debug.WriteLine($"QRScannerService.OpenNativeQRScanner() called for {type}");
            
            // Direct service call - no JavaScript needed
            await QRScannerService.OpenNativeQRScanner();
            
            System.Diagnostics.Debug.WriteLine("QRScannerService.OpenNativeQRScanner() completed");
            
            // Hide toast after 3 seconds
            await Task.Delay(3000);
            showToast = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error in OpenNativeCamera: {ex.Message}");
            toastMessage = $"Error opening camera: {ex.Message}";
            showToast = true;
            StateHasChanged();
            
            // Hide error toast after 5 seconds
            await Task.Delay(5000);
            showToast = false;
            StateHasChanged();
        }
    }


}
