@page "/qr-scanner"
@using AttrackSharedClass.Models
@using Microsoft.Extensions.Http
@using ScannerMaui.Services
@using Microsoft.JSInterop
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject IJSRuntime JSRuntime
@inject ScannerMaui.Services.QRScannerService QRScannerService
@inject ScannerMaui.Services.OfflineDataService OfflineDataService
@inject ScannerMaui.Services.ConnectionStatusService ConnectionStatusService
@inject ScannerMaui.Services.HybridQRValidationService HybridQRValidationService
@implements IDisposable

<PageTitle>QR Scanner - Attrak</PageTitle>


<div class="container-fluid vh-100 d-flex flex-column bg-light">
    <!-- Header -->
    <div class="row bg-primary text-white p-2">
        <div class="col-12 text-center">
            <div class="d-flex justify-content-between align-items-center mb-1">
                <div class="connection-status">
                    <span class="badge @(ConnectionStatusService.IsOnline ? "bg-success" : (ConnectionStatusService.IsChecking ? "bg-warning" : "bg-danger"))">
                        @ConnectionStatusService.StatusText
                    </span>
                </div>
                <h5 class="mb-0">Attendance Scanner</h5>
                <div class="offline-count">
                    @if (offlineRecordCount > 0)
                    {
                        <div class="d-flex align-items-center gap-2">
                        <span class="badge bg-warning text-dark">
                            📱 @offlineRecordCount offline
                        </span>
                                <button class="btn btn-sm btn-success" @onclick="ShowPendingModal" title="View Pending Students">
                                    <i class="fas fa-sync"></i>
                                </button>
                        </div>
                    }
                </div>
            </div>
            @if (currentTeacher != null)
            {
                <div class="small">
                    <span class="text-light">
                        <i class="fas fa-user"></i> @currentTeacher.FullName
                    </span>
                    @if (!string.IsNullOrEmpty(currentTeacher.SchoolName) && currentTeacher.SchoolName != "Loading...")
                    {
                        <span class="text-light opacity-75 ms-2">
                            <i class="fas fa-school"></i> @currentTeacher.SchoolName
                        </span>
                    }
                </div>
            }
        </div>
    </div>


    <!-- Scanner Section -->
        <div class="row p-2 flex-grow-1">
            <div class="col-12">
                <div class="card h-100">
                    <div class="card-header py-2">
                        <div class="d-flex justify-content-between align-items-center flex-wrap">
                            <h6 class="mb-0">
                                <i class="fas fa-qrcode me-2"></i>Scan Student QR Code
                            </h6>
                        </div>
                        <div class="mt-2">
                            <div class="d-flex flex-wrap gap-1">
                                <span class="badge bg-primary">@DateTime.Now.ToString("HH:mm:ss")</span>
                                <span class="badge bg-info">@DateTime.Now.ToString("MMM dd, yyyy")</span>
                            </div>
                            <div class="mt-2">
                                <small class="text-muted">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Select Time In or Time Out above, then scan QR code | 7:30-12:00 = Half Day | 12:00-4:30 = Half Day | 7:30-4:30 = Whole Day | Late after 7:31 AM
                                </small>
                            </div>
                        </div>
                    </div>
                    <div class="card-body d-flex flex-column py-2">
                        <!-- QR Scanner Component -->
                        <div class="scanner-container flex-grow-1 bg-light rounded mb-3 d-flex align-items-center justify-content-center" style="min-height: 300px;">
                            <div class="text-center w-100">
                                <!-- QR Code Icon -->
                                <div class="mb-4">
                                    <i class="fas fa-qrcode fa-4x text-primary"></i>
                                </div>
                                
                                <!-- Title -->
                                <h5 class="mb-3 text-dark">Continuous QR Scanner</h5>
                                
                                <!-- Description -->
                                <p class="mb-4 text-muted">Tap Time In or Time Out, then scan student QR codes</p>
                                
                                <!-- Time In / Time Out Buttons -->
                                <div class="row mb-4">
                                    <div class="col-6">
                                        <button class="btn btn-primary btn-lg w-100 py-3" @onclick="@(() => SetAttendanceTypeAndStartScanning("TimeIn"))">
                                            <i class="fas fa-sign-in-alt fa-2x mb-2"></i><br/>
                                            <strong>Time In</strong>
                                        </button>
                                    </div>
                                    <div class="col-6">
                                        <button class="btn btn-warning btn-lg w-100 py-3" @onclick="@(() => SetAttendanceTypeAndStartScanning("TimeOut"))">
                                            <i class="fas fa-sign-out-alt fa-2x mb-2"></i><br/>
                                            <strong>Time Out</strong>
                                        </button>
                                    </div>
                                </div>
                                
                                <!-- Current Mode Display -->
                                @if (!string.IsNullOrEmpty(attendanceType))
                                {
                                    <div class="alert alert-info py-2 mb-3">
                                        <small>
                                            <i class="fas fa-info-circle me-1"></i>
                                            <strong>Current Mode:</strong> @(attendanceType == "TimeIn" ? "Time In" : "Time Out")<br/>
                                            <strong>Status:</strong> @GetScanningStatusMessage()<br/>
                                            <strong>Time:</strong> @DateTime.Now.ToString("HH:mm:ss")
                                        </small>
                                    </div>
                                }
                                
                                <!-- Action Buttons -->
                                <div class="d-flex gap-2 justify-content-center">
                                <button class="btn btn-secondary btn-lg px-4 py-2" @onclick="GoBack">
                                    <i class="fas fa-arrow-left me-2"></i>Back
                                </button>
                                    <button class="btn btn-info btn-lg px-4 py-2" @onclick="ShowDatabaseInfo">
                                        <i class="fas fa-database me-2"></i>Database Info
                                    </button>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>


    <!-- Attendance List -->
    @if (attendanceList?.Any() == true)
    {
        <div class="row p-2">
            <div class="col-12">
                <div class="card">
                    <div class="card-header py-2">
                        <div class="d-flex justify-content-between align-items-center flex-wrap">
                            <h6 class="mb-0">
                                <i class="fas fa-list me-2"></i>Today's Attendance (@GetUniqueAttendanceRecords().Count)
                            </h6>
                        <button class="btn btn-sm btn-outline-primary" @onclick="ExportAttendance">
                                <i class="fas fa-download me-1"></i>Export
                        </button>
                        </div>
                    </div>
                    <div class="card-body py-2">
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Student ID</th>
                                        <th>Name</th>
                                        <th>Type</th>
                                        <th>Time</th>
                                        <th>Status</th>
                                        <th>Remarks</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var attendance in GetUniqueAttendanceRecords().OrderByDescending(a => a.Timestamp))
                                    {
                                        <tr class="@(attendance.IsValid ? "table-success" : "table-danger")">
                                            <td>@attendance.StudentId</td>
                                            <td>@attendance.StudentName</td>
                                            <td>
                                                <span class="badge @(attendance.AttendanceType == "TimeIn" ? "bg-primary" : "bg-warning")">
                                                    @(attendance.AttendanceType == "TimeIn" ? "Time In" : "Time Out")
                                                </span>
                                            </td>
                                            <td>@attendance.Timestamp.ToString("HH:mm:ss")</td>
                                            <td>
                                                @if (attendance.IsValid)
                                                {
                                                    <span class="badge @(attendance.Status switch {
                                                        "Present" => "bg-success",
                                                        "Late" => "bg-warning",
                                                        "Absent" => "bg-danger",
                                                        _ => "bg-success"
                                                    })">@attendance.Status</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">Not Enrolled</span>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(attendance.Remarks))
                                                {
                                                    <span class="badge @(attendance.Remarks switch {
                                                        "Whole Day" => "bg-success",
                                                        "Half Day" => "bg-warning",
                                                        _ => "bg-info"
                                                    })">@attendance.Remarks</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Debug: Always show offline records section -->
    <div class="row mt-3">
        <div class="col-12">
            <div class="card border-info">
                <div class="card-header bg-info text-white">
                    <h6 class="mb-0">Debug: Offline Records Count = @offlineRecordCount</h6>
                </div>
                <div class="card-body">
                    <p>This section is always visible for debugging.</p>
                    <button class="btn btn-sm btn-primary" @onclick="LoadOfflineRecordCount">Refresh Count</button>
                    <button class="btn btn-sm btn-success" @onclick="CreateTestOfflineRecord">Create Test Record</button>
                    <button class="btn btn-sm btn-warning" @onclick="ForceDatabaseInit">Force DB Init</button>
                    <button class="btn btn-sm btn-danger" @onclick="TestOfflineMode">Test Offline Mode</button>
                    <button class="btn btn-sm btn-info" @onclick="TestDatabaseConnection">Test DB Connection</button>
                    <button class="btn btn-sm btn-secondary" @onclick="CheckSyncStatus">Check Sync Status</button>
                    <button class="btn btn-sm btn-dark" @onclick="ClearSyncedRecords">Clear Synced Records</button>
                    <button class="btn btn-sm btn-warning" @onclick="ForceMarkAllAsSynced">Force Mark All Synced</button>
                    <button class="btn btn-sm btn-danger" @onclick="ForceRefreshCount">Force Refresh Count</button>
                    <button class="btn btn-sm btn-danger" @onclick="ClearAllOfflineData">🗑️ Clear All Data</button>
                    <button class="btn btn-sm btn-warning" @onclick="DeleteDatabaseFile">🗑️ Delete DB File</button>
                    <button class="btn btn-sm btn-info" @onclick="CleanupDuplicates">🧹 Clean Duplicates</button>
                    <button class="btn btn-sm btn-danger" @onclick="ForceClearAllData">💥 Force Clear All</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Offline Records Section -->
    @if (offlineRecordCount > 0)
    {
        <div class="row mt-3">
            <div class="col-12">
                <div class="card border-warning">
                    <div class="card-header bg-warning text-dark py-2">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">
                                <i class="fas fa-database me-2"></i>Offline Records (@offlineRecordCount pending)
                            </h6>
                            <div>
                                @if (isAutoSyncing)
                                {
                                    <button class="btn btn-sm btn-success me-2" @onclick="TriggerAutoSync" disabled="true">
                                        <i class="fas fa-spinner fa-spin me-1"></i>Syncing...
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-success me-2" @onclick="TriggerAutoSync" disabled="false">
                                        <i class="fas fa-sync me-1"></i>Sync All
                                    </button>
                                }
                                <button class="btn btn-sm btn-info" @onclick="ShowOfflineRecords">
                                    <i class="fas fa-list me-1"></i>View Details
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body py-2">
                        <div class="alert alert-warning mb-2">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>Offline Mode:</strong> These records are saved locally and will be synced when connection is restored.
                        </div>
                        <div class="table-responsive">
                            <table class="table table-sm table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Student ID</th>
                                        <th>Type</th>
                                        <th>Scan Time</th>
                                        <th>Status</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var record in offlineRecords.Take(5))
                                    {
                                        <tr>
                                            <td>
                                                <code>@record.StudentId</code>
                                            </td>
                                            <td>
                                                <span class="badge @(record.AttendanceType == "TimeIn" ? "bg-success" : "bg-warning")">
                                                    @record.AttendanceType
                                                </span>
                                            </td>
                                            <td>
                                                <small>@record.ScanTime.ToString("MM/dd HH:mm:ss")</small>
                                            </td>
                                            <td>
                                                <span class="badge @(record.IsSynced ? "bg-success" : "bg-warning")">
                                                    @(record.IsSynced ? "Synced" : "Pending")
                                                </span>
                                            </td>
                                            <td>
                                                @if (!record.IsSynced)
                                                {
                                                    <button class="btn btn-sm btn-primary" @onclick="() => SyncIndividualRecord(record.Id)">
                                                        <i class="fas fa-sync me-1"></i>Sync
                                                    </button>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Already synced</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                    @if (offlineRecordCount > 5)
                                    {
                                        <tr>
                                            <td colspan="5" class="text-center">
                                                <small class="text-muted">... and @(offlineRecordCount - 5) more records</small>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Database Info Modal -->
    @if (showDatabaseInfo)
    {
        <div class="row p-2">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">
                            <i class="fas fa-database me-2"></i>Database Information
                        </h6>
                        <button type="button" class="btn-close" @onclick="() => showDatabaseInfo = false"></button>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6>📊 Current Status</h6>
                                <div class="mb-3">
                                    <strong>Mode:</strong> 
                                    <span class="badge @(AuthService.IsOfflineMode ? "bg-warning" : "bg-success")">
                                        @(AuthService.IsOfflineMode ? "Offline" : "Online")
                                    </span>
                                </div>
                                <div class="mb-3">
                                    <strong>Connection:</strong> 
                                    <span class="badge @(ConnectionStatusService.IsOnline ? "bg-success" : (ConnectionStatusService.IsChecking ? "bg-warning" : "bg-danger"))">
                                        @ConnectionStatusService.StatusText
                                    </span>
                                </div>
                                <div class="mb-3">
                                    <strong>Offline Records:</strong> 
                                    <span class="badge bg-info">@offlineRecordCount pending</span>
                                    @if (offlineRecordCount > 0)
                                    {
                                        @if (isAutoSyncing)
                                        {
                                            <button class="btn btn-sm btn-success ms-2" @onclick="TriggerAutoSync" disabled="true">
                                                <i class="fas fa-spinner fa-spin me-1"></i>Syncing...
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-sm btn-success ms-2" @onclick="TriggerAutoSync" disabled="false">
                                                <i class="fas fa-sync me-1"></i>Sync Now
                                            </button>
                                        }
                                        <button class="btn btn-sm btn-info ms-1" @onclick="ShowOfflineRecords">
                                            <i class="fas fa-list me-1">View List</i>
                                        </button>
                                    }
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h6>🗂️ Database Location</h6>
                                <div class="mb-3">
                                    <strong>Database Path:</strong>
                                    <div class="bg-light p-2 rounded mt-1">
                                        <small class="text-muted font-monospace">@GetDatabasePath()</small>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <strong>App Data Directory:</strong>
                                    <div class="bg-light p-2 rounded mt-1">
                                        <small class="text-muted font-monospace">@GetAppDataDirectory()</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex gap-2 mt-3 flex-wrap">
                            <button class="btn btn-primary btn-sm" @onclick="CopyDatabasePath">
                                <i class="fas fa-copy me-1"></i>Copy Path
                            </button>
                            <button class="btn btn-success btn-sm" @onclick="ViewOfflineData">
                                <i class="fas fa-eye me-1"></i>View Data
                            </button>
                            <button class="btn btn-warning btn-sm" @onclick="ExportOfflineData">
                                <i class="fas fa-download me-1"></i>Export Data
                            </button>
                            <button class="btn btn-info btn-sm" @onclick="CreateTestDatabase">
                                <i class="fas fa-plus me-1"></i>Create Test File
                            </button>
                            <button class="btn btn-warning btn-sm" @onclick="ShowPermissionInstructions">
                                <i class="fas fa-key me-1"></i>Enable Storage
                            </button>
                            <button class="btn btn-secondary btn-sm" @onclick="CopyDatabaseToAccessibleLocation">
                                <i class="fas fa-copy me-1"></i>Copy DB
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Messages -->
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="row p-2">
            <div class="col-12">
                <div class="alert @(isSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show py-2" role="alert">
                    <small>@message</small>
                    <button type="button" class="btn-close btn-close-sm" @onclick="() => message = string.Empty"></button>
                </div>
            </div>
        </div>
    }

    <!-- Toast/Snackbar for Camera Status -->
    @if (showToast)
    {
        <div class="position-fixed top-0 start-50 translate-middle-x" style="z-index: 1050; margin-top: 20px;">
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header bg-success text-white">
                    <i class="fas fa-camera me-2"></i>
                    <strong class="me-auto">Camera</strong>
                    <small>now</small>
                </div>
                <div class="toast-body bg-light">
                    @toastMessage
                </div>
            </div>
        </div>
    }
</div>

<style>
    .scanner-animation {
        position: relative;
        display: inline-block;
    }
    
    .scanning-line {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, transparent, #28a745, transparent);
        animation: scanning 2s linear infinite;
    }
    
    @@keyframes scanning {
        0% { transform: translateY(0); }
        100% { transform: translateY(4rem); }
    }
    
    .success-flash {
        animation: successFlash 0.5s ease-in-out;
    }
    
    @@keyframes successFlash {
        0% { background-color: transparent; }
        50% { background-color: rgba(40, 167, 69, 0.3); }
        100% { background-color: transparent; }
    }
    
    /* Mobile-friendly styles */
    @@media (max-width: 768px) {
        .scanner-container {
            min-height: 200px !important;
        }
        
        .btn-lg {
            padding: 0.75rem 1rem;
            font-size: 1rem;
        }
        
        .form-select-lg {
            padding: 0.75rem 1rem;
            font-size: 1rem;
        }
        
        .card-body {
            padding: 1rem !important;
        }
        
        .card-header {
            padding: 0.75rem 1rem !important;
        }
        
        .badge {
            font-size: 0.75rem;
        }
        
        .table-responsive {
            font-size: 0.875rem;
        }
    }
    
    /* Extra small devices */
    @@media (max-width: 576px) {
        .container-fluid {
            padding-left: 0.5rem;
            padding-right: 0.5rem;
        }
        
        .row {
            margin-left: -0.25rem;
            margin-right: -0.25rem;
        }
        
        .col-12 {
            padding-left: 0.25rem;
            padding-right: 0.25rem;
        }
        
        .scanner-container {
            min-height: 180px !important;
        }
        
        .btn-lg {
            padding: 0.5rem 0.75rem;
            font-size: 0.9rem;
        }
    }
</style>

<!-- Sound is now handled in native QR scanner -->

@code {
    private string message = string.Empty;
    private bool isSuccess = false;
    private List<AttendanceRecord> attendanceList = new();
    private TeacherInfo? currentTeacher;
    private bool showToast = false;
    private string toastMessage = string.Empty;
    private string attendanceType = string.Empty;
    private string currentStudentId = string.Empty;
    
    // Continuous scanning variables
    private bool isScanning = false;
    private bool isProcessing = false;
    private AttendanceRecord? lastScanResult = null;
    
    // Timer for updating current time display
    private Timer? timeUpdateTimer;
    private Timer? connectionCheckTimer;
    
    // Offline mode variables
    private int offlineRecordCount = 0;
    private bool showDatabaseInfo = false;
    private bool isAutoSyncing = false;
    private bool showPendingModal = false;
    private List<PendingStudent> pendingStudents = new();
    private bool showOfflineRecordsModal = false;
    private List<OfflineAttendanceRecord> offlineRecords = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentTeacher();
        await LoadOfflineRecordCount();
        
        // Subscribe to QR code scanned events
        QRScannerService.QRCodeScanned += OnQRCodeScanned;
        QRScannerService.OfflineDataSaved += OnOfflineDataSaved;
        
        // Subscribe to connection status changes
        ConnectionStatusService.ConnectionStatusChanged += OnConnectionStatusChanged;
        
        // Check connection status on startup
        await ConnectionStatusService.CheckConnectionAsync();
        
        // Start timer to update current time display every second
        timeUpdateTimer = new Timer(async _ => await InvokeAsync(StateHasChanged), null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        
        // Start connection check timer (every 30 seconds) - use InvokeAsync for thread safety
        connectionCheckTimer = new Timer(async _ => await InvokeAsync(async () => await ConnectionStatusService.CheckConnectionAsync()), null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
    }
    
    public void Dispose()
    {
        // Unsubscribe from events
        QRScannerService.QRCodeScanned -= OnQRCodeScanned;
        QRScannerService.OfflineDataSaved -= OnOfflineDataSaved;
        ConnectionStatusService.ConnectionStatusChanged -= OnConnectionStatusChanged;
        
        // Dispose timers
        timeUpdateTimer?.Dispose();
        connectionCheckTimer?.Dispose();
    }

    private async Task LoadCurrentTeacher()
    {
        try
        {
            var user = await AuthService.GetCurrentUserAsync();
            
            // If no user found, redirect to login
            if (user == null || user.UserType != UserType.Teacher || string.IsNullOrEmpty(user.TeacherId))
            {
                Navigation.NavigateTo("/");
                return;
            }

            // Load full teacher information from API
            var httpClient = HttpClientFactory.CreateClient("AttrakAPI");
            var response = await httpClient.GetFromJsonAsync<TeacherInfo>($"api/teachersubject/teacher-info/{user.TeacherId}");
            
            if (response != null)
            {
                currentTeacher = response;
            }
            else
            {
                // Fallback to basic info from user
                currentTeacher = new TeacherInfo
                {
                    TeacherId = user.TeacherId,
                    FullName = user.Username,
                    Email = user.Email,
                    SchoolName = "Unknown School",
                    SchoolId = "" // Will be set when we get proper teacher info
                };
            }
        }
        catch (Exception ex)
        {
            message = $"Error loading teacher info: {ex.Message}";
            isSuccess = false;
            
            // Fallback to basic info
            var user = await AuthService.GetCurrentUserAsync();
            if (user != null && user.UserType == UserType.Teacher)
            {
                currentTeacher = new TeacherInfo
                {
                    TeacherId = user.TeacherId ?? "",
                    FullName = user.Username,
                    Email = user.Email,
                    SchoolName = "Error loading school",
                    SchoolId = ""
                };
            }
        }
    }






    private async Task LoadTodayAttendance()
    {
        try
        {
            if (currentTeacher == null)
            {
                System.Diagnostics.Debug.WriteLine("LoadTodayAttendance: currentTeacher is null");
                return;
            }

            System.Diagnostics.Debug.WriteLine($"LoadTodayAttendance: Loading for teacher {currentTeacher.TeacherId}");
            
            var httpClient = HttpClientFactory.CreateClient("AttrakAPI");
            var response = await httpClient.GetFromJsonAsync<List<DailyAttendanceRecord>>(
                $"api/dailyattendance/today/{currentTeacher.TeacherId}");
            
            if (response != null)
            {
                // Convert DailyAttendanceRecord to AttendanceRecord for compatibility
                attendanceList = response.SelectMany(record => 
                {
                    var records = new List<AttendanceRecord>();
                    
                    // Add Time In record if exists
                    if (!string.IsNullOrEmpty(record.TimeIn))
                    {
                        records.Add(new AttendanceRecord
                        {
                            StudentId = record.StudentId,
                            StudentName = record.StudentName,
                            Timestamp = record.Date.Date.Add(TimeSpan.Parse(record.TimeIn)),
                            IsValid = true,
                            Status = record.Status,
                            AttendanceType = "TimeIn",
                            Message = "Time In recorded",
                            Remarks = record.Remarks
                        });
                    }
                    
                    // Add Time Out record if exists
                    if (!string.IsNullOrEmpty(record.TimeOut))
                    {
                        records.Add(new AttendanceRecord
                        {
                            StudentId = record.StudentId,
                            StudentName = record.StudentName,
                            Timestamp = record.Date.Date.Add(TimeSpan.Parse(record.TimeOut)),
                            IsValid = true,
                            Status = record.Status,
                            AttendanceType = "TimeOut",
                            Message = "Time Out recorded",
                            Remarks = record.Remarks
                        });
                    }
                    
                    return records;
                }).ToList();
                
                System.Diagnostics.Debug.WriteLine($"LoadTodayAttendance: Loaded {response.Count} daily records, converted to {attendanceList.Count} attendance records for teacher {currentTeacher.TeacherId}");
        }
        else
        {
                System.Diagnostics.Debug.WriteLine("LoadTodayAttendance: Response is null");
                attendanceList = new List<AttendanceRecord>();
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error loading today's attendance: {ex.Message}");
            attendanceList = new List<AttendanceRecord>();
        }
    }





    // Sound is now handled in native QR scanner

    private bool IsScanningAllowed()
    {
        var currentTime = DateTime.Now.TimeOfDay;
        var currentDay = DateTime.Now.DayOfWeek;
        
        // No scanning on weekends
        if (currentDay == DayOfWeek.Saturday || currentDay == DayOfWeek.Sunday)
        {
            return false;
        }
        
        // Define school hours
        var schoolStart = new TimeSpan(6, 0, 0);   // 6:00 AM
        var schoolEnd = new TimeSpan(18, 0, 0);    // 6:00 PM
        
        // Allow scanning only during school hours
        if (currentTime >= schoolStart && currentTime <= schoolEnd)
        {
            // Additional validation for Time In and Time Out
            if (!string.IsNullOrEmpty(attendanceType))
            {
                if (attendanceType == "TimeIn")
                {
                    // Time In should be in the morning (6 AM - 12 PM)
                    var morningEnd = new TimeSpan(12, 0, 0);
                    return currentTime <= morningEnd;
                }
                else if (attendanceType == "TimeOut")
                {
                    // Time Out should be in the afternoon (12 PM - 6 PM)
                    var afternoonStart = new TimeSpan(12, 0, 0);
                    return currentTime >= afternoonStart;
                }
            }
        return true;
        }
        
        return false; // Outside school hours
    }

    private string GetScanningStatusMessage()
    {
        var currentTime = DateTime.Now.TimeOfDay;
        var currentDay = DateTime.Now.DayOfWeek;
        
        // Check if it's weekend
        if (currentDay == DayOfWeek.Saturday || currentDay == DayOfWeek.Sunday)
        {
            return "Scanning not allowed: Weekends";
        }
        
        // Check if outside school hours
        var schoolStart = new TimeSpan(6, 0, 0);   // 6:00 AM
        var schoolEnd = new TimeSpan(18, 0, 0);    // 6:00 PM
        
        if (currentTime < schoolStart)
        {
            return $"Scanning not allowed: Too early (before 6:00 AM)";
        }
        else if (currentTime > schoolEnd)
        {
            return $"Scanning not allowed: Too late (after 6:00 PM)";
        }
        else
        {
            // Check Time In/Time Out specific restrictions
            if (!string.IsNullOrEmpty(attendanceType))
            {
                if (attendanceType == "TimeIn")
                {
                    var morningEnd = new TimeSpan(12, 0, 0);
                    if (currentTime > morningEnd)
                    {
                        return "Time In not allowed: After 12:00 PM (use Time Out instead)";
                    }
                    return "Time In allowed: Morning hours (6:00 AM - 12:00 PM)";
                }
                else if (attendanceType == "TimeOut")
                {
                    var afternoonStart = new TimeSpan(12, 0, 0);
                    if (currentTime < afternoonStart)
                    {
                        return "Time Out not allowed: Before 12:00 PM (use Time In instead)";
                    }
                    return "Time Out allowed: Afternoon hours (12:00 PM - 6:00 PM)";
                }
            }
            return "Scanning allowed: School hours (6:00 AM - 6:00 PM)";
        }
    }

    private string DetermineRemarks(DateTime currentTime)
    {
        if (attendanceType == "TimeOut")
        {
            // Find the Time In record for this student today
            var today = DateTime.Today;
            var timeInRecord = attendanceList.FirstOrDefault(a => 
                a.StudentId == currentStudentId && 
                a.AttendanceType == "TimeIn" && 
                a.Timestamp.Date == today);
            
            if (timeInRecord != null)
            {
                var timeIn = timeInRecord.Timestamp;
                var timeOut = currentTime;
                
                // Check if Time In was late (after 7:31 AM)
                var sevenThirtyOne = new TimeSpan(7, 31, 0); // 7:31 AM
                var isLate = timeIn.TimeOfDay >= sevenThirtyOne;
                
                // Determine remarks based on time ranges
                var timeInHour = timeIn.TimeOfDay.Hours;
                var timeOutHour = timeOut.TimeOfDay.Hours;
                
                string dayType;
                
                // Check if it's a whole day (7:30 AM - 4:30 PM range)
                if (timeInHour <= 7 && timeOutHour >= 16) // 7:30 AM to 4:30 PM
                {
                    dayType = "Whole Day";
            }
            else
            {
                    // All other combinations are Half Day
                    dayType = "Half Day";
                }
                
                return isLate ? $"Late - {dayType}" : dayType;
            }
            else
            {
                // No Time In found, just use time-based logic as fallback
                var timeOfDay = currentTime.TimeOfDay;
                var noon = new TimeSpan(12, 0, 0); // 12:00 PM
                
                if (timeOfDay < noon)
                {
                    return "Half Day";
                }
                else
                {
                    return "Whole Day";
                }
            }
        }
        
        return ""; // No remarks for Time In
    }

    private string DetermineRemarksAuto(DateTime currentTime, string autoAttendanceType)
    {
        if (autoAttendanceType == "TimeOut")
        {
            // Find the Time In record for this student today
            var today = DateTime.Today;
            var timeInRecord = attendanceList.FirstOrDefault(a => 
                a.StudentId == currentStudentId && 
                a.AttendanceType == "TimeIn" && 
                a.Timestamp.Date == today);
            
            if (timeInRecord != null)
            {
                var timeIn = timeInRecord.Timestamp;
                var timeOut = currentTime;
                
                // Check if Time In was late (after 7:31 AM)
                var sevenThirtyOne = new TimeSpan(7, 31, 0); // 7:31 AM
                var isLate = timeIn.TimeOfDay >= sevenThirtyOne;
                
                // Determine remarks based on time ranges
                var timeInHour = timeIn.TimeOfDay.Hours;
                var timeOutHour = timeOut.TimeOfDay.Hours;
                
                string dayType;
                
                // Check if it's a whole day (7:30 AM - 4:30 PM range)
                if (timeInHour <= 7 && timeOutHour >= 16) // 7:30 AM to 4:30 PM
                {
                    dayType = "Whole Day";
                }
                else
                {
                    // All other combinations are Half Day
                    dayType = "Half Day";
                }
                
                return isLate ? $"Late - {dayType}" : dayType;
            }
            else
            {
                // No Time In found, just use time-based logic as fallback
                var timeOfDay = currentTime.TimeOfDay;
                var noon = new TimeSpan(12, 0, 0); // 12:00 PM
                
                if (timeOfDay < noon)
                {
                    return "Half Day";
                }
                else
                {
                    return "Whole Day";
                }
            }
        }
        
        return ""; // No remarks for Time In
    }

    private string GetAttendanceMessage(AttendanceResponse result)
    {
        if (!result.IsValid)
        {
            return result.Message;
        }
        
        var typeText = result.AttendanceType switch
        {
            "TimeIn" => "Time In",
            "TimeOut" => "Time Out",
            _ => "Attendance"
        };
        
        var remarksText = !string.IsNullOrEmpty(result.Remarks) ? $" ({result.Remarks})" : "";
        
        return $"{typeText} marked: {result.StudentName}{remarksText}";
    }


    private void ExportAttendance()
    {
        // TODO: Implement attendance export functionality
        message = "Export functionality coming soon!";
        isSuccess = true;
                StateHasChanged();
    }


    private List<AttendanceRecord> GetUniqueAttendanceRecords()
    {
        // Group by StudentId and AttendanceType, then take the latest record for each combination
        var uniqueRecords = attendanceList
            .GroupBy(a => new { a.StudentId, a.AttendanceType })
            .Select(g => g.OrderByDescending(a => a.Timestamp).First())
            .ToList();
        
        return uniqueRecords;
    }

    private async void OnQRCodeScanned(object? sender, string qrCode)
    {
        if (!string.IsNullOrEmpty(qrCode) && !string.IsNullOrEmpty(attendanceType))
        {
            // The QR code has already been processed by NativeQRScannerPage
            // We just need to update the UI and reload data
            System.Diagnostics.Debug.WriteLine($"QR Code scanned event received: {qrCode}");
            
            // Use InvokeAsync to ensure UI updates happen on the correct thread
            await InvokeAsync(async () =>
            {
                // Reload attendance list to get the latest data
                await LoadTodayAttendance();
                
                // Reload offline record count
                await LoadOfflineRecordCount();
                
                // Update UI
                StateHasChanged();
            });
        }
    }

    private void SetAttendanceType(string type)
    {
        attendanceType = type;
        InvokeAsync(StateHasChanged);
    }

    private async Task SetAttendanceTypeAndStartScanning(string type)
    {
        attendanceType = type;
        StateHasChanged();
        
        // Navigate to native QR scanner page
        await Task.Delay(300); // Small delay for UI feedback
        await OpenNativeScanner(type);
    }

    private async Task OpenNativeScanner(string attendanceType)
    {
        try
        {
            // Check if scanning is allowed at current time
            if (!IsScanningAllowed())
            {
                var statusMessage = GetScanningStatusMessage();
                message = statusMessage;
                isSuccess = false;
                StateHasChanged();
                return;
            }

            // Use the QRScannerService to open the native scanner with attendance type
            await QRScannerService.OpenNativeQRScanner(attendanceType);
            
            System.Diagnostics.Debug.WriteLine($"Opened native scanner for {attendanceType}");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error opening native scanner: {ex.Message}");
            message = $"Error opening scanner: {ex.Message}";
            isSuccess = false;
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        // Stop any ongoing scanning
        StopScanning();
        
        // Navigate back
        Navigation.NavigateTo("/");
    }

    private async Task ProcessStudentQRCode(string studentId)
    {
        try
        {
            if (currentTeacher == null || string.IsNullOrEmpty(attendanceType)) return;

            // Set current student ID for remarks calculation
            currentStudentId = studentId;

            // Set processing state
            isProcessing = true;
            isScanning = false;
            StateHasChanged();

            var currentTime = DateTime.Now;
            var remarks = DetermineRemarks(currentTime);
            
            System.Diagnostics.Debug.WriteLine($"Processing {attendanceType} for student {studentId} at {currentTime:yyyy-MM-dd HH:mm:ss}");
            
            // Use HybridQRValidationService to handle both online and offline scenarios
            var validationResult = await HybridQRValidationService.ValidateQRCodeAsync(studentId, attendanceType);
            
            if (validationResult.IsValid)
            {
                // Success - show positive feedback
                var studentName = await GetStudentNameAsync(studentId);
                
                lastScanResult = new AttendanceRecord
                {
                    StudentId = studentId,
                    StudentName = studentName,
                    Timestamp = DateTime.Now,
                    IsValid = true,
                    Status = "Success",
                    AttendanceType = attendanceType,
                    Message = validationResult.Message
                };
                
                message = validationResult.Message;
                isSuccess = true;
                
                // Sound is handled in native QR scanner
                
                // Reload attendance list to get the latest data
                await LoadTodayAttendance();
                
                // Reload offline record count
                await LoadOfflineRecordCount();
            }
            else
            {
                // Failed validation - show error
                lastScanResult = new AttendanceRecord
                {
                    StudentId = studentId,
                    StudentName = "Unknown",
                    Timestamp = DateTime.Now,
                    IsValid = false,
                    Status = "Error",
                    AttendanceType = attendanceType,
                    Message = validationResult.Message
                };
                
                message = validationResult.Message;
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            lastScanResult = new AttendanceRecord
            {
                StudentId = studentId,
                StudentName = "Unknown",
                Timestamp = DateTime.Now,
                IsValid = false,
                Status = "Error",
                AttendanceType = "Unknown",
                Message = $"Error: {ex.Message}"
            };
            message = $"Error: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ProcessStudentQRCodeAuto(string studentId)
    {
        try
        {
            if (currentTeacher == null) return;

            // Set current student ID for remarks calculation
            currentStudentId = studentId;

            // First, reload today's attendance to get the latest data
            await LoadTodayAttendance();

            // Check database directly for existing attendance records
        var today = DateTime.Today;
            var httpClient = HttpClientFactory.CreateClient("AttrakAPI");
            
            // Check if student has Time In for today
            var timeInResponse = await httpClient.GetFromJsonAsync<DailyAttendanceStatus>($"api/dailyattendance/daily-status/{studentId}?date={today:yyyy-MM-dd}");
            var hasTimeIn = timeInResponse?.TimeIn != null;
            
            // Check if student has Time Out for today by getting the full record
            var todayResponse = await httpClient.GetFromJsonAsync<List<DailyAttendanceRecord>>($"api/dailyattendance/today/{currentTeacher.TeacherId}");
            var hasTimeOut = todayResponse?.Any(r => r.StudentId == studentId && !string.IsNullOrEmpty(r.TimeOut)) == true;

            System.Diagnostics.Debug.WriteLine($"Student {studentId} - HasTimeIn: {hasTimeIn}, HasTimeOut: {hasTimeOut}");

            // Auto-determine attendance type
            string autoAttendanceType;
            if (!hasTimeIn)
            {
                autoAttendanceType = "TimeIn";
            }
            else if (!hasTimeOut)
            {
                autoAttendanceType = "TimeOut";
            }
            else
            {
                // Both Time In and Time Out already exist
                lastScanResult = new AttendanceRecord
                {
                    StudentId = studentId,
                    StudentName = "Student",
                    Timestamp = DateTime.Now,
                    IsValid = false,
                    Status = "Complete",
                    AttendanceType = "Complete",
                    Message = "Student already has complete attendance for today."
                };
                message = "Student already has complete attendance for today.";
                isSuccess = false;
                StateHasChanged();
                return;
            }

            // Set processing state
            isProcessing = true;
            isScanning = false;
            StateHasChanged();

            var currentTime = DateTime.Now;
            var remarks = DetermineRemarksAuto(currentTime, autoAttendanceType);
            
            System.Diagnostics.Debug.WriteLine($"Auto-detected {autoAttendanceType} for student {studentId} at {currentTime:yyyy-MM-dd HH:mm:ss}");
            
            HttpResponseMessage response;
            
            if (autoAttendanceType == "TimeIn")
            {
                var request = new DailyTimeInRequest
                {
                    StudentId = studentId,
                    Date = currentTime.Date,
                    TimeIn = currentTime.TimeOfDay
                };

                System.Diagnostics.Debug.WriteLine($"Sending Time In request - StudentId: {request.StudentId}, Date: {request.Date}, TimeIn: {request.TimeIn}");
                response = await httpClient.PostAsJsonAsync("api/dailyattendance/daily-timein", request);
            }
            else
            {
                var request = new DailyTimeOutRequest
                {
                    StudentId = studentId,
                    Date = currentTime.Date,
                    TimeOut = currentTime.TimeOfDay
                };

                System.Diagnostics.Debug.WriteLine($"Sending Time Out request - StudentId: {request.StudentId}, Date: {request.Date}, TimeOut: {request.TimeOut}");
                response = await httpClient.PostAsJsonAsync("api/dailyattendance/daily-timeout", request);
            }
            
            System.Diagnostics.Debug.WriteLine($"API Response Status: {response.StatusCode}");
            
            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                System.Diagnostics.Debug.WriteLine($"API Response Content: {responseContent}");
                
                if (autoAttendanceType == "TimeIn")
                {
                    var result = await response.Content.ReadFromJsonAsync<DailyTimeInResponse>();
                    System.Diagnostics.Debug.WriteLine($"Parsed Time In Result - Success: {result?.Success}, Message: {result?.Message}");
                    
                    if (result?.Success == true)
                    {
                        // Reload attendance list to get the latest data from server
                        await LoadTodayAttendance();
                        
                        // Sound is handled in native QR scanner
                        message = $"✓ Time In: {result.TimeIn} ({result.Status})";
                        isSuccess = true;
                        
                        // Show success feedback briefly then continue scanning
                        StateHasChanged();
                        await Task.Delay(2000); // Show success for 2 seconds
                        
                        // Continue scanning automatically
                        await StartContinuousScanning();
                    }
                    else
                    {
                        lastScanResult = new AttendanceRecord
                        {
                            StudentId = studentId,
                            StudentName = "Unknown",
                            Timestamp = DateTime.Now,
                            IsValid = false,
                            Status = "Error",
                            AttendanceType = "TimeIn",
                            Message = result?.Message ?? "Failed to mark Time In"
                        };
                        message = result?.Message ?? "Failed to mark Time In";
                        isSuccess = false;
                    }
                }
                else
                {
                    var result = await response.Content.ReadFromJsonAsync<DailyTimeOutResponse>();
                    System.Diagnostics.Debug.WriteLine($"Parsed Time Out Result - Success: {result?.Success}, Message: {result?.Message}");
                    
                    if (result?.Success == true)
                    {
                        // Reload attendance list to get the latest data from server
                        await LoadTodayAttendance();
                        
                        // Get student name for display
                        var studentName = await GetStudentNameAsync(studentId);
                        
                        // Create a temporary record for display feedback
                        var feedbackRecord = new AttendanceRecord
                        {
                            StudentId = studentId,
                            StudentName = studentName,
                            Timestamp = DateTime.Now,
                            IsValid = true,
                            Status = "Present",
                            AttendanceType = "TimeOut",
                            Message = result.Message,
                            Remarks = result.Remarks
                        };
                        
                        lastScanResult = feedbackRecord;
                        
                        // Sound is handled in native QR scanner
                        message = $"Time Out marked: {result.TimeOut} ({result.Remarks})";
                isSuccess = true;
            }
            else
            {
                        lastScanResult = new AttendanceRecord
                {
                    StudentId = studentId,
                            StudentName = "Unknown",
                            Timestamp = DateTime.Now,
                    IsValid = false,
                            Status = "Error",
                            AttendanceType = "TimeOut",
                            Message = result?.Message ?? "Failed to mark Time Out"
                };
                        message = result?.Message ?? "Failed to mark Time Out";
                isSuccess = false;
            }
        }
            }
            else
        {
                var errorContent = await response.Content.ReadAsStringAsync();
                System.Diagnostics.Debug.WriteLine($"API Error Response: {errorContent}");
                
                // Try to parse the error response to get the actual message
                string errorMessage = $"API Error: {response.StatusCode}";
                try
                {
                    var errorResponse = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(errorContent);
                    if (errorResponse != null && errorResponse.ContainsKey("message"))
                    {
                        errorMessage = errorResponse["message"].ToString() ?? errorMessage;
                    }
                }
                catch
                {
                    // If parsing fails, use the raw content
                    errorMessage = errorContent.Length > 100 ? errorContent.Substring(0, 100) + "..." : errorContent;
                }
                
                var studentName = await GetStudentNameAsync(studentId);
                lastScanResult = new AttendanceRecord
            {
                StudentId = studentId,
                    StudentName = studentName,
                    Timestamp = DateTime.Now,
                IsValid = false,
                    Status = "Error",
                    AttendanceType = attendanceType,
                    Message = errorMessage
            };
                message = errorMessage;
            isSuccess = false;
        }
        }
        catch (Exception ex)
        {
            lastScanResult = new AttendanceRecord
            {
                StudentId = studentId,
                StudentName = "Unknown",
                Timestamp = DateTime.Now,
                IsValid = false,
                Status = "Error",
                AttendanceType = "Unknown",
                Message = $"Error: {ex.Message}"
            };
            message = $"Error: {ex.Message}";
            isSuccess = false;
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }


    private async Task StartContinuousScanning()
    {
        try
        {
            // Check if scanning is allowed at current time
            if (!IsScanningAllowed())
            {
                var statusMessage = GetScanningStatusMessage();
                message = statusMessage;
                isSuccess = false;
                StateHasChanged();
                return;
            }
            
            isScanning = true;
            lastScanResult = null;
            StateHasChanged();
            
            // Show toast message
            toastMessage = "Starting continuous scanning...";
            showToast = true;
            StateHasChanged();
            
            System.Diagnostics.Debug.WriteLine("Starting continuous QR scanning");
            
            // Start the native QR scanner in continuous mode
            await QRScannerService.OpenNativeQRScanner();
            
            System.Diagnostics.Debug.WriteLine("QRScannerService.OpenNativeQRScanner() completed successfully");
            
            // Hide toast after 3 seconds
            await Task.Delay(3000);
            showToast = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error starting continuous scanning: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"Stack trace: {ex.StackTrace}");
            toastMessage = $"Error starting scanner: {ex.Message}";
            showToast = true;
            isScanning = false;
            StateHasChanged();
            
            // Hide error toast after 5 seconds
            await Task.Delay(5000);
            showToast = false;
            StateHasChanged();
        }
    }

    private void StopScanning()
    {
        isScanning = false;
        isProcessing = false;
        lastScanResult = null;
        InvokeAsync(StateHasChanged);
    }

    private async Task ContinueScanning()
    {
        lastScanResult = null;
        await StartContinuousScanning();
    }

    // Offline mode methods
    private async Task LoadOfflineRecordCount()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("Loading offline record count...");
            offlineRecordCount = await QRScannerService.GetOfflineRecordCountAsync();
            System.Diagnostics.Debug.WriteLine($"Offline record count loaded: {offlineRecordCount}");
            
            // Force UI refresh
            StateHasChanged();
            
            // Also try to refresh the connection status display
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error loading offline record count: {ex.Message}");
            offlineRecordCount = 0;
            StateHasChanged();
        }
    }

    private async Task ForceRefreshCount()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("=== Force Refreshing Count ===");
            
            // Get fresh count from database
            var newCount = await QRScannerService.GetOfflineRecordCountAsync();
            System.Diagnostics.Debug.WriteLine($"Fresh count from database: {newCount}");
            
            // Update the variable
            offlineRecordCount = newCount;
            System.Diagnostics.Debug.WriteLine($"Updated offlineRecordCount variable: {offlineRecordCount}");
            
            // Force multiple UI refreshes
            StateHasChanged();
            await InvokeAsync(StateHasChanged);
            await Task.Delay(100); // Small delay
            StateHasChanged();
            
            System.Diagnostics.Debug.WriteLine($"Final count after force refresh: {offlineRecordCount}");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error force refreshing count: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async Task CreateTestOfflineRecord()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("=== Creating test offline record ===");
            System.Diagnostics.Debug.WriteLine($"OfflineDataService is null: {OfflineDataService == null}");
            
            if (OfflineDataService == null)
            {
                System.Diagnostics.Debug.WriteLine("ERROR: OfflineDataService is null!");
                return;
            }
            
            System.Diagnostics.Debug.WriteLine("Calling SaveOfflineAttendanceAsync...");
            var success = await OfflineDataService.SaveOfflineAttendanceAsync("TEST-STUDENT-001", "TimeIn");
            System.Diagnostics.Debug.WriteLine($"SaveOfflineAttendanceAsync result: {success}");
            
            if (success)
            {
                System.Diagnostics.Debug.WriteLine("Test offline record created successfully");
                System.Diagnostics.Debug.WriteLine("Loading offline record count...");
                await LoadOfflineRecordCount();
                System.Diagnostics.Debug.WriteLine($"New offline record count: {offlineRecordCount}");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Failed to create test offline record");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error creating test offline record: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async Task ForceDatabaseInit()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("=== Force Database Initialization ===");
            System.Diagnostics.Debug.WriteLine($"OfflineDataService is null: {OfflineDataService == null}");
            
            if (OfflineDataService == null)
            {
                System.Diagnostics.Debug.WriteLine("ERROR: OfflineDataService is null!");
                return;
            }
            
            // Try to create a test record to force database creation
            System.Diagnostics.Debug.WriteLine("Attempting to create test record to force database initialization...");
            var success = await OfflineDataService.SaveOfflineAttendanceAsync("FORCE-INIT-001", "TimeIn");
            System.Diagnostics.Debug.WriteLine($"Force init result: {success}");
            
            // Now try to get the count
            System.Diagnostics.Debug.WriteLine("Getting count after force init...");
            await LoadOfflineRecordCount();
            System.Diagnostics.Debug.WriteLine($"Count after force init: {offlineRecordCount}");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error in force database init: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async Task TestOfflineMode()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("=== Testing Offline Mode ===");
            System.Diagnostics.Debug.WriteLine("Simulating QR code scan in offline mode...");
            
            // Simulate scanning a QR code
            var testQRCode = "TEST-OFFLINE-001";
            System.Diagnostics.Debug.WriteLine($"Simulating QR scan: {testQRCode}");
            
            // This should trigger the hybrid validation service
            await QRScannerService.ProcessQRCode(testQRCode, attendanceType);
            
            // Wait a bit for processing
            await Task.Delay(1000);
            
            // Check the count
            await LoadOfflineRecordCount();
            System.Diagnostics.Debug.WriteLine($"Count after offline test: {offlineRecordCount}");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error in offline mode test: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async Task TestDatabaseConnection()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("=== Testing Database Connection ===");
            System.Diagnostics.Debug.WriteLine($"OfflineDataService is null: {OfflineDataService == null}");
            
            if (OfflineDataService == null)
            {
                System.Diagnostics.Debug.WriteLine("ERROR: OfflineDataService is null!");
                return;
            }
            
            System.Diagnostics.Debug.WriteLine("Testing database connection...");
            var success = await OfflineDataService.TestDatabaseConnectionAsync();
            System.Diagnostics.Debug.WriteLine($"Database connection test result: {success}");
            
            if (success)
            {
                System.Diagnostics.Debug.WriteLine("Database connection test PASSED!");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Database connection test FAILED!");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error testing database connection: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async Task CheckSyncStatus()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("=== Checking Sync Status ===");
            System.Diagnostics.Debug.WriteLine($"OfflineDataService is null: {OfflineDataService == null}");
            
            if (OfflineDataService == null)
            {
                System.Diagnostics.Debug.WriteLine("ERROR: OfflineDataService is null!");
                return;
            }
            
            System.Diagnostics.Debug.WriteLine("Checking sync status...");
            await OfflineDataService.CheckSyncStatusAsync();
            
            // Also refresh the count
            await LoadOfflineRecordCount();
            System.Diagnostics.Debug.WriteLine($"Current offline record count: {offlineRecordCount}");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error checking sync status: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async Task ClearSyncedRecords()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("=== Clearing Synced Records ===");
            System.Diagnostics.Debug.WriteLine($"OfflineDataService is null: {OfflineDataService == null}");
            
            if (OfflineDataService == null)
            {
                System.Diagnostics.Debug.WriteLine("ERROR: OfflineDataService is null!");
                return;
            }
            
            System.Diagnostics.Debug.WriteLine("Clearing synced records...");
            var success = await OfflineDataService.ClearSyncedRecordsAsync();
            
            if (success)
            {
                System.Diagnostics.Debug.WriteLine("Successfully cleared synced records");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Failed to clear synced records");
            }
            
            // Force refresh the count
            await ForceRefreshCount();
            System.Diagnostics.Debug.WriteLine($"Offline record count after clearing: {offlineRecordCount}");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error clearing synced records: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async Task ForceMarkAllAsSynced()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("=== Force Marking All Records as Synced ===");
            System.Diagnostics.Debug.WriteLine($"OfflineDataService is null: {OfflineDataService == null}");
            
            if (OfflineDataService == null)
            {
                System.Diagnostics.Debug.WriteLine("ERROR: OfflineDataService is null!");
                return;
            }
            
            System.Diagnostics.Debug.WriteLine("Force marking all records as synced...");
            var success = await OfflineDataService.ForceMarkAllAsSyncedAsync();
            
            if (success)
            {
                System.Diagnostics.Debug.WriteLine("Successfully marked all records as synced");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Failed to mark all records as synced");
            }
            
            // Force refresh the count
            await ForceRefreshCount();
            System.Diagnostics.Debug.WriteLine($"Offline record count after force marking: {offlineRecordCount}");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error force marking all records as synced: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async Task<string> GetStudentNameAsync(string studentId)
    {
        try
        {
            return await OfflineDataService.GetStudentNameForDisplayAsync(studentId);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error getting student name: {ex.Message}");
            return $"Student {studentId}";
        }
    }

    private async Task ShowPendingModal()
    {
        try
        {
            pendingStudents = await OfflineDataService.GetPendingStudentsAsync();
            showPendingModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error loading pending students: {ex.Message}");
        }
    }

    private async Task SyncIndividualStudent(string studentId)
    {
        try
        {
            var apiBaseUrl = "https://attrak.onrender.com/";
            var teacherId = currentTeacher?.TeacherId ?? "unknown";
            
            var result = await OfflineDataService.SyncIndividualStudentAsync(studentId, apiBaseUrl, teacherId);
            
            if (result.Success)
            {
                // Remove from pending list
                pendingStudents.RemoveAll(p => p.StudentId == studentId);
                await LoadOfflineRecordCount(); // Refresh count
                message = $"✅ {result.Message}";
                isSuccess = true;
                System.Diagnostics.Debug.WriteLine($"Successfully synced student {studentId}");
            }
            else
            {
                // Check if this was an invalid student
                if (result.InvalidStudents?.Contains(studentId) == true)
                {
                    // Remove from pending list since it was invalid
                    pendingStudents.RemoveAll(p => p.StudentId == studentId);
                    await LoadOfflineRecordCount(); // Refresh count
                    message = $"⚠️ {result.Message}";
                    isSuccess = false;
                }
                else
                {
                    message = $"❌ {result.Message}";
                    isSuccess = false;
                }
                System.Diagnostics.Debug.WriteLine($"Failed to sync student {studentId}: {result.Message}");
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            message = $"❌ Error syncing student: {ex.Message}";
            isSuccess = false;
            System.Diagnostics.Debug.WriteLine($"Error syncing individual student: {ex.Message}");
            StateHasChanged();
        }
    }

    private async Task TriggerAutoSync()
    {
        try
        {
            isAutoSyncing = true;
            StateHasChanged();
            
            // Get API base URL from configuration
            var apiBaseUrl = "https://attrak.onrender.com/"; // Your actual API URL
            
            // Get current teacher ID
            var teacherId = currentTeacher?.TeacherId ?? "unknown";
            
            // Use HybridQRValidationService for sync
            var success = await HybridQRValidationService.SyncOfflineDataAsync();
            
            if (success)
            {
                await LoadOfflineRecordCount(); // Refresh count
                message = "✅ Offline records synced successfully";
                isSuccess = true;
                System.Diagnostics.Debug.WriteLine("Manual sync completed successfully");
                System.Diagnostics.Debug.WriteLine($"Offline record count after sync: {offlineRecordCount}");
                
                // Close any open modals
                showOfflineRecordsModal = false;
                showPendingModal = false;
            }
            else
            {
                await LoadOfflineRecordCount(); // Refresh count
                message = "❌ Failed to sync offline records";
                isSuccess = false;
                System.Diagnostics.Debug.WriteLine("Manual sync failed");
                System.Diagnostics.Debug.WriteLine($"Offline record count after failed sync: {offlineRecordCount}");
            }
        }
        catch (Exception ex)
        {
            message = $"❌ Error in sync: {ex.Message}";
            isSuccess = false;
            System.Diagnostics.Debug.WriteLine($"Error in manual sync: {ex.Message}");
        }
        finally
        {
            isAutoSyncing = false;
            StateHasChanged();
        }
    }

    private async Task TriggerAutoSyncSilent()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("=== Triggering Silent Auto Sync ===");
            
            // Use HybridQRValidationService for sync
            var success = await HybridQRValidationService.SyncOfflineDataAsync();
            
            await LoadOfflineRecordCount(); // Refresh count
            
            if (success)
            {
                System.Diagnostics.Debug.WriteLine("Silent auto-sync completed successfully");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Silent auto-sync failed");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error in silent auto-sync: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }

    private async void OnOfflineDataSaved(object? sender, string qrCode)
    {
        // Use InvokeAsync to ensure UI updates happen on the correct thread
        await InvokeAsync(async () =>
        {
            await LoadOfflineRecordCount();
            System.Diagnostics.Debug.WriteLine($"Offline data saved for QR code: {qrCode}");
            
            // Show scan result with student name
            var studentName = await GetStudentNameAsync(qrCode);
            lastScanResult = new AttendanceRecord
            {
                StudentId = qrCode,
                StudentName = studentName,
                Timestamp = DateTime.Now,
                IsValid = true,
                Status = "Saved Offline",
                AttendanceType = "Offline",
                Message = "Data saved offline - will sync when connection is available"
            };
            
            message = $"✅ {studentName} - Data saved offline";
            isSuccess = true;
            StateHasChanged();
            
            // Try auto-sync if connection is available
            // Note: Connection checking is now handled by HybridQRValidationService
            try
            {
                System.Diagnostics.Debug.WriteLine("Attempting auto-sync...");
                await TriggerAutoSyncSilent();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Auto-sync failed: {ex.Message}");
            }
        });
    }

    private async void OnConnectionStatusChanged(object? sender, bool isOnline)
    {
        await InvokeAsync(StateHasChanged);
        System.Diagnostics.Debug.WriteLine($"Connection status changed: {(isOnline ? "Online" : "Offline")}");
        
        // IMPORTANT: Never clear pending data when connection changes
        // Pending data should always be preserved regardless of connection status
        
        // Auto-sync when connection is restored (but don't clear data if sync fails)
        if (isOnline && offlineRecordCount > 0)
        {
            System.Diagnostics.Debug.WriteLine("Connection restored with pending offline records, attempting auto-sync...");
            try
            {
                await TriggerAutoSyncSilent();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Auto-sync failed after connection restore: {ex.Message}");
                // Don't clear data - just log the error and keep pending records
            }
        }
        
        // Refresh offline record count to ensure UI shows correct status
        await LoadOfflineRecordCount();
        System.Diagnostics.Debug.WriteLine($"Offline record count after connection change: {offlineRecordCount}");
    }

    // Offline Records Methods
    private async Task ShowOfflineRecords()
    {
        try
        {
            offlineRecords = await OfflineDataService.GetUnsyncedAttendanceAsync();
            showOfflineRecordsModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error loading offline records: {ex.Message}");
        }
    }

    private async Task SyncIndividualRecord(int recordId)
    {
        try
        {
            var record = offlineRecords.FirstOrDefault(r => r.Id == recordId);
            if (record == null) return;

            var success = await QRScannerService.SyncIndividualRecordAsync(record);
            
            if (success)
            {
                record.IsSynced = true;
                StateHasChanged();
                await LoadOfflineRecordCount();
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error syncing individual record: {ex.Message}");
        }
    }

    // Database Info Methods
    private void ShowDatabaseInfo()
    {
        showDatabaseInfo = !showDatabaseInfo;
        StateHasChanged();
    }

    private string GetDatabasePath()
    {
        try
        {
            // Get the database path from OfflineDataService
            var offlineDataService = new OfflineDataService();
            return offlineDataService.GetDatabasePath();
        }
        catch (Exception ex)
        {
            return $"Error getting path: {ex.Message}";
        }
    }

    private string GetAppDataDirectory()
    {
        try
        {
            // Get the app data directory
            var offlineDataService = new OfflineDataService();
            return offlineDataService.GetAppDataDirectory();
        }
        catch (Exception ex)
        {
            return $"Error getting directory: {ex.Message}";
        }
    }

    private async Task CopyDatabasePath()
    {
        try
        {
            var databasePath = GetDatabasePath();
            await Clipboard.SetTextAsync(databasePath);
            message = "✅ Database path copied to clipboard!";
            isSuccess = true;
        }
        catch (Exception ex)
        {
            message = $"❌ Error copying path: {ex.Message}";
            isSuccess = false;
        }
        
        StateHasChanged();
    }

    private async Task ViewOfflineData()
    {
        try
        {
            await LoadOfflineRecordCount();
            message = $"📊 Found {offlineRecordCount} offline records";
            isSuccess = true;
        }
        catch (Exception ex)
        {
            message = $"❌ Error viewing data: {ex.Message}";
            isSuccess = false;
        }
        
        StateHasChanged();
    }

    private async Task ExportOfflineData()
    {
        try
        {
            var success = await QRScannerService.SaveExportToFileAsync();
            
            if (success)
            {
                message = "✅ Offline data exported successfully!";
                isSuccess = true;
            }
            else
            {
                message = "❌ Failed to export offline data";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"❌ Error exporting data: {ex.Message}";
            isSuccess = false;
        }
        
        StateHasChanged();
    }

    private async Task CreateTestDatabase()
    {
        try
        {
            var offlineDataService = new OfflineDataService();
            var success = await offlineDataService.CreateTestDatabaseFileAsync();
            
            if (success)
            {
                message = "✅ Test files created! Check Downloads folder for 'ATTRAK_TEST.txt' and app storage for 'SIMPLE_TEST.txt'. If no files in Downloads, enable Storage permission in Android Settings > Apps > ScannerMaui > Permissions.";
                isSuccess = true;
            }
            else
            {
                message = "❌ Failed to create test database file";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = $"❌ Error creating test file: {ex.Message}";
            isSuccess = false;
        }
        
        StateHasChanged();
    }

    private void ShowPermissionInstructions()
    {
        message = "📱 STORAGE PERMISSION STEPS:\n\n" +
                 "1. Go to Android Settings\n" +
                 "2. Apps & notifications (or Apps)\n" +
                 "3. Find 'ScannerMaui'\n" +
                 "4. Tap 'Permissions'\n" +
                 "5. Enable 'Storage' permission\n" +
                 "6. Try 'Create Test File' again\n\n" +
                 "If still not working, try:\n" +
                 "- Restart the app after enabling permission\n" +
                 "- Check if 'Files and media' permission is enabled\n" +
                 "- Some Android versions need 'All files access' permission";
        isSuccess = false;
        StateHasChanged();
    }

    private async Task CopyDatabaseToAccessibleLocation()
    {
        try
        {
            var offlineDataService = new OfflineDataService();
            var result = await offlineDataService.CopyDatabaseToAccessibleLocationAsync();
            
            message = result;
            isSuccess = result.Contains("copied to");
        }
        catch (Exception ex)
        {
            message = $"❌ Error copying database: {ex.Message}";
            isSuccess = false;
        }
        
        StateHasChanged();
    }

    // Clear all offline data
    private async Task ClearAllOfflineData()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("=== CLEARING ALL OFFLINE DATA ===");
            
            if (OfflineDataService == null)
            {
                System.Diagnostics.Debug.WriteLine("ERROR: OfflineDataService is null!");
                message = "❌ Error: OfflineDataService not available";
                isSuccess = false;
                return;
            }
            
            System.Diagnostics.Debug.WriteLine("Clearing all offline data...");
            var success = await OfflineDataService.ClearAllOfflineDataAsync();
            
            if (success)
            {
                System.Diagnostics.Debug.WriteLine("Successfully cleared all offline data");
                message = "✅ All offline data cleared successfully!";
                isSuccess = true;
                
                // Refresh the count
                await LoadOfflineRecordCount();
                System.Diagnostics.Debug.WriteLine($"Offline record count after clearing: {offlineRecordCount}");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Failed to clear offline data");
                message = "❌ Failed to clear offline data";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error clearing offline data: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"Stack trace: {ex.StackTrace}");
            message = $"❌ Error clearing data: {ex.Message}";
            isSuccess = false;
        }
        
        StateHasChanged();
    }

    // Delete the entire database file
    private async Task DeleteDatabaseFile()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("=== DELETING DATABASE FILE ===");
            
            if (OfflineDataService == null)
            {
                System.Diagnostics.Debug.WriteLine("ERROR: OfflineDataService is null!");
                message = "❌ Error: OfflineDataService not available";
                isSuccess = false;
                return;
            }
            
            System.Diagnostics.Debug.WriteLine("Deleting database file...");
            var success = OfflineDataService.DeleteDatabaseFile();
            
            if (success)
            {
                System.Diagnostics.Debug.WriteLine("Successfully deleted database file");
                message = "✅ Database file deleted successfully!";
                isSuccess = true;
                
                // Refresh the count
                await LoadOfflineRecordCount();
                System.Diagnostics.Debug.WriteLine($"Offline record count after deletion: {offlineRecordCount}");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Failed to delete database file or file didn't exist");
                message = "⚠️ Database file not found or already deleted";
                isSuccess = true; // This is not really an error
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error deleting database file: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"Stack trace: {ex.StackTrace}");
            message = $"❌ Error deleting database file: {ex.Message}";
            isSuccess = false;
        }
        
        StateHasChanged();
    }

    private async Task CleanupDuplicates()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("=== CLEANING UP DUPLICATE RECORDS ===");
            
            var success = await OfflineDataService.CleanupDuplicateRecords();
            
            if (success)
            {
                System.Diagnostics.Debug.WriteLine("Successfully cleaned up duplicate records");
                message = "✅ Duplicate records cleaned up successfully!";
                isSuccess = true;
                
                // Refresh the offline record count
                await LoadOfflineRecordCount();
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Failed to clean up duplicate records");
                message = "❌ Failed to clean up duplicate records";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error cleaning up duplicates: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"Stack trace: {ex.StackTrace}");
            message = $"❌ Error cleaning up duplicates: {ex.Message}";
            isSuccess = false;
        }
        
        StateHasChanged();
    }

    private async Task ForceClearAllData()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("=== FORCE CLEARING ALL ATTENDANCE DATA ===");
            
            var success = await OfflineDataService.ForceClearAllAttendanceData();
            
            if (success)
            {
                System.Diagnostics.Debug.WriteLine("Successfully force cleared all attendance data");
                message = "✅ All attendance data force cleared successfully!";
                isSuccess = true;
                
                // Refresh the offline record count
                await LoadOfflineRecordCount();
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Failed to force clear all attendance data");
                message = "❌ Failed to force clear all attendance data";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error force clearing all data: {ex.Message}");
            System.Diagnostics.Debug.WriteLine($"Stack trace: {ex.StackTrace}");
            message = $"❌ Error force clearing all data: {ex.Message}";
            isSuccess = false;
        }
        
        StateHasChanged();
    }

}

<!-- Pending Students Modal -->
@if (showPendingModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-users me-2"></i>Pending Students (@pendingStudents.Count)
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => showPendingModal = false"></button>
                </div>
                <div class="modal-body">
                    @if (pendingStudents.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Student Name</th>
                                        <th>Student ID</th>
                                        <th>Type</th>
                                        <th>Time</th>
                                        <th>Records</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var student in pendingStudents)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@student.StudentName</strong>
                                            </td>
                                            <td>
                                                <code>@student.StudentId</code>
                                            </td>
                                            <td>
                                                <span class="badge @(student.AttendanceType == "TimeIn" ? "bg-success" : "bg-warning")">
                                                    @student.AttendanceType
                                                </span>
                                            </td>
                                            <td>
                                                <small>@student.ScanTime.ToString("MM/dd HH:mm")</small>
                                            </td>
                                            <td>
                                                <span class="badge bg-info">@student.RecordCount</span>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-primary" @onclick="() => SyncIndividualStudent(student.StudentId)">
                                                    <i class="fas fa-sync me-1"></i>Sync
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-check-circle text-success fa-3x mb-3"></i>
                            <h5>No Pending Students</h5>
                            <p class="text-muted">All students have been synced successfully!</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showPendingModal = false">
                        Close
                    </button>
                    @if (pendingStudents.Any())
                    {
                        <button type="button" class="btn btn-success" @onclick="TriggerAutoSync">
                            <i class="fas fa-sync me-1"></i>Sync All
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- Offline Records Modal -->
@if (showOfflineRecordsModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-database me-2"></i>Offline Records (@offlineRecords.Count)
                    </h5>
                    <button type="button" class="btn-close" @onclick="() => showOfflineRecordsModal = false"></button>
                </div>
                <div class="modal-body">
                    @if (offlineRecords.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Student ID</th>
                                        <th>Type</th>
                                        <th>Scan Time</th>
                                        <th>Status</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var record in offlineRecords)
                                    {
                                        <tr>
                                            <td>
                                                <code>@record.StudentId</code>
                                            </td>
                                            <td>
                                                <span class="badge @(record.AttendanceType == "TimeIn" ? "bg-success" : "bg-warning")">
                                                    @record.AttendanceType
                                                </span>
                                            </td>
                                            <td>
                                                <small>@record.ScanTime.ToString("MM/dd HH:mm:ss")</small>
                                            </td>
                                            <td>
                                                <span class="badge @(record.IsSynced ? "bg-success" : "bg-warning")">
                                                    @(record.IsSynced ? "Synced" : "Pending")
                                                </span>
                                            </td>
                                            <td>
                                                @if (!record.IsSynced)
                                                {
                                                    <button class="btn btn-sm btn-primary" @onclick="() => SyncIndividualRecord(record.Id)">
                                                        <i class="fas fa-sync me-1"></i>Sync
                                                    </button>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Already synced</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-check-circle text-success fa-3x mb-3"></i>
                            <h5>No Offline Records</h5>
                            <p class="text-muted">All records have been synced successfully!</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showOfflineRecordsModal = false">
                        Close
                    </button>
                    @if (offlineRecords.Any(r => !r.IsSynced))
                    {
                        <button type="button" class="btn btn-success" @onclick="TriggerAutoSync">
                            <i class="fas fa-sync me-1"></i>Sync All Pending
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}
