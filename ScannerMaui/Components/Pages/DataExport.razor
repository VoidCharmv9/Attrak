@page "/data-export"
@using ScannerMaui.Services
@inject QRScannerService QRScannerService
@inject OfflineDataService OfflineDataService
@inject ConnectionService ConnectionService
@inject AuthService AuthService

<PageTitle>Data Export & Sync</PageTitle>

<div class="export-container">
    <div class="export-header">
        <h2>üìä Data Export & Sync</h2>
        <div class="connection-status">
            <span class="status-indicator @(ConnectionService.IsOnline ? "online" : "offline")">
                @ConnectionService.GetConnectionStatusText()
            </span>
        </div>
    </div>

    <div class="export-content">
        <!-- Offline Records Summary -->
        <div class="summary-card">
            <h3>üì± Offline Records</h3>
            <div class="summary-stats">
                <div class="stat-item">
                    <span class="stat-number">@offlineRecordCount</span>
                    <span class="stat-label">Pending Records</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number">@(AuthService.IsOfflineMode ? "Offline" : "Online")</span>
                    <span class="stat-label">Current Mode</span>
                </div>
            </div>
        </div>

        <!-- Export Actions -->
        <div class="actions-card">
            <h3>üì§ Export Options</h3>
            
            <div class="action-buttons">
                <button class="btn btn-primary" @onclick="ExportToCSV" disabled="@isExporting">
                    @if (isExporting)
                    {
                        <span>‚è≥ Exporting...</span>
                    }
                    else
                    {
                        <span>üìÑ Export to CSV</span>
                    }
                </button>

                <button class="btn btn-success" @onclick="SyncToServer" disabled="@(isSyncing || !ConnectionService.IsOnline)">
                    @if (isSyncing)
                    {
                        <span>‚è≥ Syncing...</span>
                    }
                    else
                    {
                        <span>üîÑ Sync to Server</span>
                    }
                </button>

                <button class="btn btn-info" @onclick="ViewOfflineRecords" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span>‚è≥ Loading...</span>
                    }
                    else
                    {
                        <span>üëÅÔ∏è View Records</span>
                    }
                </button>
            </div>
        </div>

        <!-- Export Results -->
        @if (!string.IsNullOrEmpty(exportResult))
        {
            <div class="result-card @(exportSuccess ? "success" : "error")">
                <h4>@(exportSuccess ? "‚úÖ Success" : "‚ùå Error")</h4>
                <p>@exportResult</p>
                @if (exportSuccess && !string.IsNullOrEmpty(exportedFilePath))
                {
                    <p><strong>File saved to:</strong> @exportedFilePath</p>
                }
            </div>
        }

        <!-- Offline Records List -->
        @if (showRecords && offlineRecords.Any())
        {
            <div class="records-card">
                <h3>üìã Offline Records (@offlineRecords.Count)</h3>
                <div class="records-list">
                    @foreach (var record in offlineRecords)
                    {
                        <div class="record-item">
                            <div class="record-info">
                                <span class="student-id">@record.StudentId</span>
                                <span class="attendance-type @record.AttendanceType.ToLower()">@record.AttendanceType</span>
                            </div>
                            <div class="record-time">
                                <span>@record.ScanTime.ToString("MM/dd HH:mm")</span>
                                <span class="sync-status @(record.IsSynced ? "synced" : "pending")">
                                    @(record.IsSynced ? "‚úÖ Synced" : "‚è≥ Pending")
                                </span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Setup Offline User -->
        @if (AuthService.IsOfflineMode)
        {
            <div class="setup-card">
                <h3>üë§ Setup Offline User</h3>
                <div class="setup-form">
                    <input type="text" @bind="newUsername" placeholder="Username" class="form-input" />
                    <input type="password" @bind="newPassword" placeholder="Password" class="form-input" />
                    <input type="text" @bind="newFullName" placeholder="Full Name" class="form-input" />
                    <button class="btn btn-secondary" @onclick="SetupOfflineUser" disabled="@isSettingUp">
                        @if (isSettingUp)
                        {
                            <span>‚è≥ Setting up...</span>
                        }
                        else
                        {
                            <span>‚ûï Add User</span>
                        }
                    </button>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .export-container {
        padding: 20px;
        max-width: 800px;
        margin: 0 auto;
    }

    .export-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding-bottom: 15px;
        border-bottom: 2px solid #e0e0e0;
    }

    .export-header h2 {
        margin: 0;
        color: #333;
    }

    .connection-status {
        font-size: 14px;
        font-weight: bold;
    }

    .status-indicator {
        padding: 5px 10px;
        border-radius: 15px;
        color: white;
    }

    .status-indicator.online {
        background-color: #28a745;
    }

    .status-indicator.offline {
        background-color: #dc3545;
    }

    .export-content {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .summary-card, .actions-card, .result-card, .records-card, .setup-card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .summary-stats {
        display: flex;
        gap: 30px;
        margin-top: 15px;
    }

    .stat-item {
        text-align: center;
    }

    .stat-number {
        display: block;
        font-size: 24px;
        font-weight: bold;
        color: #007bff;
    }

    .stat-label {
        font-size: 12px;
        color: #666;
        text-transform: uppercase;
    }

    .action-buttons {
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
        margin-top: 15px;
    }

    .btn {
        padding: 12px 20px;
        border: none;
        border-radius: 8px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        min-width: 150px;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

    .btn-info {
        background-color: #17a2b8;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .result-card.success {
        border-left: 4px solid #28a745;
        background-color: #d4edda;
    }

    .result-card.error {
        border-left: 4px solid #dc3545;
        background-color: #f8d7da;
    }

    .records-list {
        max-height: 300px;
        overflow-y: auto;
        margin-top: 15px;
    }

    .record-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #eee;
    }

    .record-info {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .student-id {
        font-weight: bold;
        color: #333;
    }

    .attendance-type {
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: bold;
        color: white;
    }

    .attendance-type.timein {
        background-color: #28a745;
    }

    .attendance-type.timeout {
        background-color: #dc3545;
    }

    .record-time {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        font-size: 12px;
        color: #666;
    }

    .sync-status {
        font-weight: bold;
    }

    .sync-status.synced {
        color: #28a745;
    }

    .sync-status.pending {
        color: #ffc107;
    }

    .setup-form {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-top: 15px;
    }

    .form-input {
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 14px;
    }

    .form-input:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
    }

    @@media (max-width: 768px) {
        .export-container {
            padding: 15px;
        }

        .action-buttons {
            flex-direction: column;
        }

        .btn {
            min-width: auto;
            width: 100%;
        }

        .summary-stats {
            flex-direction: column;
            gap: 15px;
        }
    }
</style>

@code {
    private int offlineRecordCount = 0;
    private List<OfflineAttendanceRecord> offlineRecords = new();
    private bool isLoading = false;
    private bool isExporting = false;
    private bool isSyncing = false;
    private bool isSettingUp = false;
    private bool showRecords = false;
    private string exportResult = string.Empty;
    private bool exportSuccess = false;
    private string exportedFilePath = string.Empty;

    // Setup form fields
    private string newUsername = string.Empty;
    private string newPassword = string.Empty;
    private string newFullName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadOfflineRecordCount();
    }

    private async Task LoadOfflineRecordCount()
    {
        try
        {
            offlineRecordCount = await OfflineDataService.GetUnsyncedCountAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error loading offline record count: {ex.Message}");
        }
    }

    private async Task ExportToCSV()
    {
        try
        {
            isExporting = true;
            StateHasChanged();

            var success = await QRScannerService.SaveExportToFileAsync();
            
            if (success)
            {
                exportResult = "Data exported successfully to CSV file!";
                exportSuccess = true;
                exportedFilePath = Path.Combine(FileSystem.AppDataDirectory, $"attendance_export_{DateTime.Now:yyyyMMdd_HHmmss}.csv");
            }
            else
            {
                exportResult = "Failed to export data. Please try again.";
                exportSuccess = false;
            }
        }
        catch (Exception ex)
        {
            exportResult = $"Export error: {ex.Message}";
            exportSuccess = false;
        }
        finally
        {
            isExporting = false;
            StateHasChanged();
        }
    }

    private async Task SyncToServer()
    {
        try
        {
            isSyncing = true;
            StateHasChanged();

            // TODO: Implement actual server sync
            // For now, just simulate the sync
            await Task.Delay(2000);

            exportResult = "Data synced to server successfully!";
            exportSuccess = true;

            // Refresh the record count
            await LoadOfflineRecordCount();
        }
        catch (Exception ex)
        {
            exportResult = $"Sync error: {ex.Message}";
            exportSuccess = false;
        }
        finally
        {
            isSyncing = false;
            StateHasChanged();
        }
    }

    private async Task ViewOfflineRecords()
    {
        try
        {
            isLoading = true;
            showRecords = false;
            StateHasChanged();

            offlineRecords = await OfflineDataService.GetUnsyncedAttendanceAsync();
            showRecords = true;
        }
        catch (Exception ex)
        {
            exportResult = $"Error loading records: {ex.Message}";
            exportSuccess = false;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SetupOfflineUser()
    {
        try
        {
            if (string.IsNullOrEmpty(newUsername) || string.IsNullOrEmpty(newPassword) || string.IsNullOrEmpty(newFullName))
            {
                exportResult = "Please fill in all fields.";
                exportSuccess = false;
                return;
            }

            isSettingUp = true;
            StateHasChanged();

            var success = await AuthService.SetupOfflineUserAsync(newUsername, newPassword, "Teacher", newFullName);
            
            if (success)
            {
                exportResult = "Offline user setup successfully!";
                exportSuccess = true;
                
                // Clear form
                newUsername = string.Empty;
                newPassword = string.Empty;
                newFullName = string.Empty;
            }
            else
            {
                exportResult = "Failed to setup offline user. Please try again.";
                exportSuccess = false;
            }
        }
        catch (Exception ex)
        {
            exportResult = $"Setup error: {ex.Message}";
            exportSuccess = false;
        }
        finally
        {
            isSettingUp = false;
            StateHasChanged();
        }
    }
}
