@page "/daily-attendance"
@using AttrackSharedClass.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components
@using Attrak.Services
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IAuthService AuthService

<PageTitle>Student Daily Attendance Management</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-calendar-day me-2"></i>
                        Student Daily Attendance Management
                    </h3>
                    <p class="text-muted mb-0">Teachers can manage student daily attendance</p>
                </div>
                <div class="card-body">

                    <!-- Teacher Info Display -->
                    <div class="row mb-4">
                        <div class="col-12">
                            <div class="alert alert-info">
                                <h5 class="alert-heading">
                                    <i class="fas fa-user-tie me-2"></i>
                                    Current Teacher
                                </h5>
                                <p class="mb-0">
                                    <strong>Alimpuangon, Lornilo S.</strong>
                                    <br>
                                    <small class="text-muted"> L
                                        Section: <strong>HUMSS 2</strong> | School: <strong>Koronadal National Comprehensive High School</strong>
                                    </small>
                                    <br>
                                    <small class="text-muted">Managing student daily attendance</small>
                                </p>
                            </div>
                        </div>
                    </div>



                        <!-- Today's Attendance Summary Cards -->
                        <div class="row mb-4">
                            <div class="col-md-3">
                                <div class="card bg-success text-white">
                                    <div class="card-body text-center">
                                        <i class="fas fa-check-circle fa-2x mb-2"></i>
                                        <h3 class="mb-1">3</h3>
                                        <p class="mb-0">Present Today</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-warning text-white">
                                    <div class="card-body text-center">
                                        <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                                        <h3 class="mb-1">1</h3>
                                        <p class="mb-0">Late Today</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-danger text-white">
                                    <div class="card-body text-center">
                                        <i class="fas fa-clock fa-2x mb-2"></i>
                                        <h3 class="mb-1">2</h3>
                                        <p class="mb-0">Time In Only</p>
                                </div>
                            </div>
                        </div>
                            <div class="col-md-3">
                                <div class="card bg-info text-white">
                                    <div class="card-body text-center">
                                        <i class="fas fa-user-check fa-2x mb-2"></i>
                                        <h3 class="mb-1">1</h3>
                                        <p class="mb-0">Complete</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Today's Attendance Records -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <div class="card shadow">
                                    <div class="card-header bg-dark text-white">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <h5 class="mb-0">
                                                <i class="fas fa-calendar-day me-2"></i>Today's Attendance Records
                                            </h5>
                                            <span class="badge bg-light text-dark">
                                                <i class="fas fa-calendar me-1"></i>@DateTime.Today.ToString("MMMM dd, yyyy")
                                            </span>
                                        </div>
                                    </div>
                                    <div class="card-body p-0">
                                        <div class="table-responsive">
                                            <table class="table table-hover mb-0">
                                                <thead class="table-light">
                                                    <tr>
                                                        <th class="border-0">Student Name</th>
                                                        <th class="border-0 text-center">Time In</th>
                                                        <th class="border-0 text-center">Time Out</th>
                                                        <th class="border-0 text-center">Status</th>
                                                        <th class="border-0 text-center">Remarks</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <!-- Present Students -->
                                                    <tr class="table-success">
                                                        <td colspan="5" class="fw-bold text-success">
                                                            <i class="fas fa-check-circle me-2"></i>Present Students
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td class="ps-4 fw-semibold">Delacruz, Juan Miguel</td>
                                                        <td class="text-center">
                                                            <span class="badge bg-success fs-6">07:25 AM</span>
                                                        </td>
                                                        <td class="text-center">
                                                            <span class="badge bg-danger fs-6">04:30 PM</span>
                                                        </td>
                                                        <td class="text-center">
                                                            <span class="badge bg-success">
                                                                <i class="fas fa-check me-1"></i>Present
                                                            </span>
                                                        </td>
                                                        <td class="text-center">
                                                            <span class="badge bg-info">Whole Day</span>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td class="ps-4 fw-semibold">Jose, Maria Santos</td>
                                                        <td class="text-center">
                                                            <span class="badge bg-success fs-6">07:20 AM</span>
                                                        </td>
                                                        <td class="text-center">
                                                            <span class="text-muted">-</span>
                                                        </td>
                                                        <td class="text-center">
                                                            <span class="badge bg-success">
                                                                <i class="fas fa-check me-1"></i>Present
                                                            </span>
                                                        </td>
                                                        <td class="text-center">
                                                            <span class="text-muted">-</span>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td class="ps-4 fw-semibold">Asuncion, Pedro Cruz</td>
                                                        <td class="text-center">
                                                            <span class="badge bg-success fs-6">07:15 AM</span>
                                                        </td>
                                                        <td class="text-center">
                                                            <span class="text-muted">-</span>
                                                        </td>
                                                        <td class="text-center">
                                                            <span class="badge bg-success">
                                                                <i class="fas fa-check me-1"></i>Present
                                                            </span>
                                                        </td>
                                                        <td class="text-center">
                                                            <span class="text-muted">-</span>
                                                        </td>
                                                    </tr>

                                                    <!-- Late Students -->
                                                    <tr class="table-warning">
                                                        <td colspan="5" class="fw-bold text-warning">
                                                            <i class="fas fa-exclamation-triangle me-2"></i>Late Students
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td class="ps-4 fw-semibold">De Ana, Ana Marie</td>
                                                        <td class="text-center">
                                                            <span class="badge bg-warning fs-6">07:45 AM</span>
                                                        </td>
                                                        <td class="text-center">
                                                            <span class="text-muted">-</span>
                                                        </td>
                                                        <td class="text-center">
                                                            <span class="badge bg-warning">
                                                                <i class="fas fa-exclamation me-1"></i>Late
                                                            </span>
                                                        </td>
                                                        <td class="text-center">
                                                            <span class="text-muted">-</span>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Data
    private List<Student> students = new();
    private List<DailyAttendanceRecord> attendanceHistory = new();
    private List<DailyAttendanceRecord> todayAttendanceRecords = new();

    // UI State
    private string selectedStudentId = "";
    private string selectedStudentName = "";
    private string selectedStudentGrade = "";
    private string selectedStudentSection = "";
    private string currentTeacherName = "";
    private string currentTeacherId = "";
    private string currentTeacherSection = "";
    private string currentTeacherSchool = "";
    private DateTime selectedDate = DateTime.Today;
    private string attendanceStatus = "Not Marked";
    private string timeInTime = "";
    private bool isLoadingHistory = false;
    private bool isLoadingTodayRecords = false;
    private bool isProcessing = false;

    // Messages
    private string successMessage = "";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentTeacher();
        await LoadStudents();
        await LoadTodayAttendanceRecords();
    }

    private async Task LoadStudents()
    {
        try
        {
            // Load students filtered by teacher's section and school
            var response = await Http.GetFromJsonAsync<List<Student>>($"api/register/students?teacherId={currentTeacherId}");
            if (response != null)
            {
                students = response;
            }
        }
        catch (Exception)
        {
            errorMessage = "Error loading students list";
        }
    }

    private async Task LoadTodayAttendanceRecords()
    {
        if (string.IsNullOrEmpty(currentTeacherId)) return;

        isLoadingTodayRecords = true;
        StateHasChanged();

        try
        {
            var response = await Http.GetFromJsonAsync<List<DailyAttendanceRecord>>($"api/dailyattendance/today/{currentTeacherId}");
            todayAttendanceRecords = response ?? new List<DailyAttendanceRecord>();
        }
        catch (Exception)
        {
            todayAttendanceRecords = new List<DailyAttendanceRecord>();
        }
        finally
        {
            isLoadingTodayRecords = false;
            StateHasChanged();
        }
    }

    private async Task LoadCurrentTeacher()
    {
        try
        {
            var currentUser = await AuthService.GetCurrentUserAsync();
            
            if (currentUser != null && currentUser.UserType == UserType.Teacher)
            {
                currentTeacherName = currentUser.Username;
                
                // Get detailed teacher information including section and school
                var teacherResponse = await Http.GetFromJsonAsync<TeacherInfo>($"api/register/teacher-by-user/{currentUser.UserId}");
                if (teacherResponse != null)
                {
                    currentTeacherId = teacherResponse.TeacherId;
                    currentTeacherSection = teacherResponse.Section;
                    currentTeacherSchool = teacherResponse.SchoolName;
                    
                    // Reload students with teacher filter after getting teacher info
                    await LoadStudents();
                }
                else
                {
                    errorMessage = "Unable to load teacher details";
                }
            }
            else
            {
                errorMessage = "Please login as a teacher to access this page";
            }
        }
        catch (Exception)
        {
            errorMessage = "Error loading current teacher information";
        }
    }

    private async Task OnStudentChanged()
    {
        if (!string.IsNullOrEmpty(selectedStudentId))
        {
            // Find the selected student's information
            var student = students.FirstOrDefault(s => s.StudentId == selectedStudentId);
            if (student != null)
            {
                selectedStudentName = student.FullName;
                selectedStudentGrade = student.GradeLevel.ToString();
                selectedStudentSection = student.Section;
                
                // Load attendance data for the selected student
                await LoadTodayAttendance();
                await LoadAttendanceHistory();
            }
        }
        else
        {
            // Clear student info
            selectedStudentName = "";
            selectedStudentGrade = "";
            selectedStudentSection = "";
            attendanceStatus = "Not Marked";
            timeInTime = "";
            attendanceHistory.Clear();
        }
    }

    private async Task OnDateChanged()
    {
        await LoadTodayAttendance();
        await LoadAttendanceHistory();
    }

    private async Task LoadTodayAttendance()
    {
        if (string.IsNullOrEmpty(selectedStudentId)) return;

        try
        {
            var response = await Http.GetFromJsonAsync<DailyAttendanceStatus>($"api/attendance/daily-status/{selectedStudentId}?date={selectedDate:yyyy-MM-dd}");
            
            if (response != null)
            {
                attendanceStatus = response.Status;
                timeInTime = response.TimeIn ?? "";
            }
            else
            {
                attendanceStatus = "Not Marked";
                timeInTime = "";
            }
        }
        catch (Exception)
        {
            attendanceStatus = "Not Marked";
            timeInTime = "";
        }
    }

    private async Task LoadAttendanceHistory()
    {
        if (string.IsNullOrEmpty(selectedStudentId)) return;

        isLoadingHistory = true;
        StateHasChanged();

        try
        {
            var response = await Http.GetFromJsonAsync<List<DailyAttendanceRecord>>($"api/attendance/daily-history/{selectedStudentId}?days=30");
            attendanceHistory = response ?? new List<DailyAttendanceRecord>();
        }
        catch (Exception)
        {
            attendanceHistory = new List<DailyAttendanceRecord>();
        }
        finally
        {
            isLoadingHistory = false;
            StateHasChanged();
        }
    }

    private async Task MarkAttendance()
    {
        if (string.IsNullOrEmpty(selectedStudentId)) return;

        isProcessing = true;
        StateHasChanged();

        try
        {
            var request = new DailyTimeInRequest
            {
                StudentId = selectedStudentId,
                Date = selectedDate,
                TimeIn = DateTime.Now.TimeOfDay
            };

            var response = await Http.PostAsJsonAsync("api/attendance/daily-timein", request);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<DailyTimeInResponse>();
                if (result?.Success == true)
                {
                    successMessage = $"Attendance marked successfully! Status: {result.Status}";
                    errorMessage = "";
                    attendanceStatus = result.Status;
                    timeInTime = result.TimeIn;
                    
                    // Refresh history and today's records
                    await LoadAttendanceHistory();
                    await LoadTodayAttendanceRecords();
                    
                    // Auto-hide success message after 3 seconds
                    _ = Task.Delay(3000).ContinueWith(_ => {
                        successMessage = "";
                        InvokeAsync(StateHasChanged);
                    });
                }
                else
                {
                    errorMessage = result?.Message ?? "Failed to mark attendance";
                    successMessage = "";
                }
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
                try
                {
                    var errorObj = System.Text.Json.JsonSerializer.Deserialize<dynamic>(errorResponse);
                    errorMessage = $"Error: {errorObj?.GetProperty("message")?.GetString() ?? "Failed to mark attendance"}";
                }
                catch
                {
                    errorMessage = "Error marking attendance. Please try again.";
                }
                successMessage = "";
            }
        }
        catch (Exception)
        {
            errorMessage = "Error marking attendance";
            successMessage = "";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }
}

<style>
    .card {
        border: none;
        border-radius: 10px;
    }
    
    .card-header {
        border-radius: 10px 10px 0 0 !important;
        border: none;
    }
    
    .btn {
        border-radius: 8px;
    }
    
    .btn-warning {
        background-color: #8b7355 !important;
        border-color: #8b7355 !important;
    }
    
    .btn-warning:hover {
        background-color: #7a6248 !important;
        border-color: #7a6248 !important;
    }
    
    .bg-warning {
        background-color: #8b7355 !important;
    }
    
    .table-warning {
        background-color: rgba(139, 115, 85, 0.1) !important;
    }
    
    .badge {
        font-size: 0.875rem;
        padding: 0.5rem 0.75rem;
    }
    
    .table th {
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.875rem;
        letter-spacing: 0.5px;
    }
    
    .table td {
        vertical-align: middle;
    }
    
    .fs-6 {
        font-size: 1rem !important;
    }
    
    .table-success {
        background-color: rgba(25, 135, 84, 0.1) !important;
    }
    
    .table-warning {
        background-color: rgba(255, 193, 7, 0.1) !important;
    }
    
    /* Mobile Responsive */
    @@media (max-width: 768px) {
        .container-fluid {
            padding: 1rem;
        }
        
        .card-body {
            padding: 1rem;
        }
        
        .btn-lg {
            padding: 0.75rem 1rem;
            font-size: 1rem;
        }
        
        .d-flex.gap-3 {
            flex-direction: column;
            gap: 0.5rem !important;
        }
        
        .d-flex.gap-3 .btn {
            width: 100%;
        }
    }
</style>
