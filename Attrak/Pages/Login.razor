@page "/"
@page "/login"
@using Attrak.Services
@using AttrackSharedClass.Models
@using static Attrak.Pages.StudentDashboard
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject HttpClient Http
@implements IDisposable
@layout Loginpage
<PageTitle>Login - Attrak</PageTitle>

<div class="container-fluid vh-100 d-flex align-items-center justify-content-center bg-light" @onclick="HideSchoolSuggestions">
    <div class="row w-100">
        <div class="col-md-10 col-lg-10 mx-auto">
            <div class="row">
                <!-- Image Section -->
                <div class="col-md-6 d-flex align-items-center justify-content-end pe-4">
                    <div class="text-center">
                        <img src="/as.png" alt="QR Code Attendance" class="img-fluid" style="max-height: 700px; max-width: 100%;" />
                    </div>
                </div>
                
                <!-- Form Section -->
                <div class="col-md-6 d-flex align-items-center justify-content-start ps-4">
                    <div class="card shadow" style="width: 100%; max-width: 500px;">
                        <div class="card-body p-5">
                            <div class="text-center mb-4">
                                <h2 class="fw-bold text-primary">SARDO-TRAKCARE</h2>
                                <p class="text-muted">Attendance Management System</p>
                            </div>

                    <!-- Tab Navigation -->
                    <ul class="nav nav-tabs mb-4" id="authTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(isLoginTab ? "active" : "")" id="login-tab" type="button" @onclick="() => SwitchTab(true)">
                                Login
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(!isLoginTab ? "active" : "")" id="register-tab" type="button" @onclick="() => SwitchTab(false)">
                                Register
                            </button>
                        </li>
                    </ul>

                    <!-- Login Form -->
                    @if (isLoginTab)
                    {
                        <EditForm Model="loginRequest" OnValidSubmit="HandleLogin">
                            <DataAnnotationsValidator />
                            
                            <div class="mb-3">
                                <label for="username" class="form-label">Username</label>
                                <InputText id="username" class="form-control" @bind-Value="loginRequest.Username" placeholder="Enter your username" />
                                <ValidationMessage For="@(() => loginRequest.Username)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label for="password" class="form-label">Password</label>
                                <InputText id="password" type="password" class="form-control" @bind-Value="loginRequest.Password" placeholder="Enter your password" />
                                <ValidationMessage For="@(() => loginRequest.Password)" class="text-danger" />
                            </div>

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger" role="alert">
                                    @errorMessage
                                </div>
                            }

                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary btn-lg" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Logging in...</span>
                                    }
                                    else
                                    {
                                        <span>Login</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    }

                    <!-- Registration Form -->
                    @if (!isLoginTab)
                    {
                        <EditForm Model="registerRequest" OnValidSubmit="HandleRegister">
                            <DataAnnotationsValidator />
                            
                            <!-- Personal Information Section -->
                            <div class="card mb-4">
                                <div class="card-header bg-primary text-white">
                                    <h5 class="mb-0"><i class="fas fa-user me-2"></i>Personal Information</h5>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="reg-username" class="form-label">Username</label>
                                            <InputText id="reg-username" class="form-control" @bind-Value="registerRequest.Username" @oninput="OnUsernameChanged" placeholder="Enter username" />
                                            <ValidationMessage For="@(() => registerRequest.Username)" class="text-danger" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="reg-email" class="form-label">Email</label>
                                            <InputText id="reg-email" type="email" class="form-control" @bind-Value="registerRequest.Email" placeholder="Enter email" />
                                            <ValidationMessage For="@(() => registerRequest.Email)" class="text-danger" />
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="reg-password" class="form-label">Password</label>
                                            <InputText id="reg-password" type="password" class="form-control" @bind-Value="registerRequest.Password" @oninput="OnPasswordChanged" placeholder="Enter password" />
                                            <ValidationMessage For="@(() => registerRequest.Password)" class="text-danger" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="reg-fullname" class="form-label">Full Name</label>
                                            <InputText id="reg-fullname" class="form-control text-uppercase" @bind-Value="registerRequest.FullName" @oninput="OnFullNameChanged" placeholder="Enter full name" />
                                            <ValidationMessage For="@(() => registerRequest.FullName)" class="text-danger" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- School Information Section -->
                            <div class="card mb-4">
                                <div class="card-header bg-success text-white">
                                    <h5 class="mb-0"><i class="fas fa-school me-2"></i>School Information</h5>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="reg-region" class="form-label">Region</label>
                                            <InputSelect id="reg-region" class="form-select" @bind-Value="registerRequest.Region" @bind-Value:after="OnRegionChanged">
                                                <option value="">Select Region</option>
                                                @foreach (var region in regions)
                                                {
                                                    <option value="@region">@region</option>
                                                }
                                                <option value="manual">+ Add New Region</option>
                                            </InputSelect>
                                            @if (registerRequest.Region == "manual")
                                            {
                                                <InputText class="form-control mt-2 text-uppercase" @bind-Value="manualRegion" @oninput="OnManualRegionChanged" placeholder="Enter region name manually" />
                                            }
                                            <ValidationMessage For="@(() => registerRequest.Region)" class="text-danger" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="reg-division" class="form-label">Division</label>
                                            <InputSelect id="reg-division" class="form-select" @bind-Value="registerRequest.Division" @bind-Value:after="OnDivisionChanged" disabled="@(string.IsNullOrEmpty(registerRequest.Region))">
                                                <option value="">Select Division</option>
                                                @foreach (var division in divisions)
                                                {
                                                    <option value="@division">@division</option>
                                                }
                                                <option value="manual">+ Add New Division</option>
                                            </InputSelect>
                                            @if (registerRequest.Division == "manual")
                                            {
                                                <InputText class="form-control mt-2 text-uppercase" @bind-Value="manualDivision" @oninput="OnManualDivisionChanged" placeholder="Enter division name manually" />
                                            }
                                            <ValidationMessage For="@(() => registerRequest.Division)" class="text-danger" />
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="reg-district" class="form-label">District (Optional)</label>
                                            <InputSelect id="reg-district" class="form-select" @bind-Value="registerRequest.District" @bind-Value:after="OnDistrictChanged" disabled="@(string.IsNullOrEmpty(registerRequest.Division))">
                                                <option value="">Select District (Optional)</option>
                                                @foreach (var district in districts)
                                                {
                                                    <option value="@district">@district</option>
                                                }
                                                <option value="manual">+ Add New District</option>
                                            </InputSelect>
                                            @if (registerRequest.District == "manual")
                                            {
                                                <InputText class="form-control mt-2 text-uppercase" @bind-Value="manualDistrict" @oninput="OnManualDistrictChanged" placeholder="Enter district name manually" />
                                            }
                                            <ValidationMessage For="@(() => registerRequest.District)" class="text-danger" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="reg-schoolname" class="form-label">School Name</label>
                                            <div class="position-relative">
                                                <InputText id="reg-schoolname" class="form-control text-uppercase" @bind-Value="registerRequest.SchoolName" @oninput="OnSchoolNameChanged" placeholder="Enter school name" />
                                                @if (schoolSuggestions.Any() && showSchoolSuggestions)
                                                {
                                                    <div class="list-group position-absolute w-100" style="z-index: 1000; max-height: 200px; overflow-y: auto;">
                                                        @foreach (var school in schoolSuggestions)
                                                        {
                                                            <button type="button" class="list-group-item list-group-item-action" @onclick="() => SelectSchool(school.SchoolName)">
                                                                <div class="fw-bold">@school.SchoolName</div>
                                                                <small class="text-muted">@school.Region, @school.Division</small>
                                                            </button>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                            <ValidationMessage For="@(() => registerRequest.SchoolName)" class="text-danger" />
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-4 mb-3">
                                            <label for="reg-gradelevel" class="form-label">Grade Level</label>
                                            <InputSelect id="reg-gradelevel" class="form-select" @bind-Value="registerRequest.GradeLevel" @bind-Value:after="OnGradeLevelChanged">
                                                <option value="0">Select Grade Level</option>
                                                <option value="7">Grade 7</option>
                                                <option value="8">Grade 8</option>
                                                <option value="9">Grade 9</option>
                                                <option value="10">Grade 10</option>
                                                <option value="11">Grade 11</option>
                                                <option value="12">Grade 12</option>
                                            </InputSelect>
                                            <ValidationMessage For="@(() => registerRequest.GradeLevel)" class="text-danger" />
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <label for="reg-section" class="form-label">Section</label>
                                            <InputText id="reg-section" class="form-control text-uppercase" @bind-Value="registerRequest.Section" @oninput="OnSectionChanged" placeholder="Enter section" />
                                            <ValidationMessage For="@(() => registerRequest.Section)" class="text-danger" />
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            @if (registerRequest.GradeLevel == 11 || registerRequest.GradeLevel == 12)
                                            {
                                                <label for="reg-strand" class="form-label">Strand</label>
                                                <InputText id="reg-strand" class="form-control" @bind-Value="registerRequest.Strand" placeholder="Enter strand (e.g., STEM, ABM, HUMSS, GAS)" />
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger" role="alert">
                                    @errorMessage
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="alert alert-success" role="alert">
                                    @successMessage
                                </div>
                            }

                            <div class="d-grid">
                                <button type="submit" class="btn btn-success btn-lg" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Registering...</span>
                                    }
                                    else
                                    {
                                        <span>Register as Teacher</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new();
    private RegisterRequest registerRequest = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;
    private bool isLoginTab = true;

    private List<string> regions = new();
    private List<string> divisions = new();
    private List<string> districts = new();

    // Manual input variables
    private string manualRegion = "";
    private string manualDivision = "";
    private string manualDistrict = "";

    // School suggestions
    private List<SchoolInfo> schoolSuggestions = new();
    private bool showSchoolSuggestions = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already logged in
        var currentUser = await AuthService.GetCurrentUserAsync();
        if (currentUser != null)
        {
            Navigation.NavigateTo("/dashboard");
        }

        // Load regions for registration
        await LoadRegions();
    }

    public void Dispose()
    {
        // Cleanup if needed
    }

    private void SwitchTab(bool showLogin)
    {
        isLoginTab = showLogin;
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    private void OnUsernameChanged(ChangeEventArgs e)
    {
        registerRequest.Username = e.Value?.ToString() ?? "";
    }

    private void OnPasswordChanged(ChangeEventArgs e)
    {
        registerRequest.Password = e.Value?.ToString() ?? "";
    }

    private void OnFullNameChanged(ChangeEventArgs e)
    {
        registerRequest.FullName = e.Value?.ToString()?.ToUpper() ?? "";
    }

    private void OnSectionChanged(ChangeEventArgs e)
    {
        registerRequest.Section = e.Value?.ToString()?.ToUpper() ?? "";
    }

    private void OnManualRegionChanged(ChangeEventArgs e)
    {
        manualRegion = e.Value?.ToString()?.ToUpper() ?? "";
    }

    private void OnManualDivisionChanged(ChangeEventArgs e)
    {
        manualDivision = e.Value?.ToString()?.ToUpper() ?? "";
    }

    private void OnManualDistrictChanged(ChangeEventArgs e)
    {
        manualDistrict = e.Value?.ToString()?.ToUpper() ?? "";
    }

    private void OnLoginUsernameChanged(ChangeEventArgs e)
    {
        loginRequest.Username = e.Value?.ToString() ?? "";
    }

    private void OnLoginPasswordChanged(ChangeEventArgs e)
    {
        loginRequest.Password = e.Value?.ToString() ?? "";
    }

    private async Task HandleLogin()
    {
        if (isLoading) return;

        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();

        try
        {
            var response = await AuthService.LoginAsync(loginRequest);
            
            if (response.Success)
            {
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = response.Message;
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred during login. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleRegister()
    {
        if (isLoading) return;

        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Use manual values if "manual" is selected
            if (registerRequest.Region == "manual" && !string.IsNullOrEmpty(manualRegion))
            {
                registerRequest.Region = manualRegion;
            }
            if (registerRequest.Division == "manual" && !string.IsNullOrEmpty(manualDivision))
            {
                registerRequest.Division = manualDivision;
            }
            if (registerRequest.District == "manual" && !string.IsNullOrEmpty(manualDistrict))
            {
                registerRequest.District = manualDistrict;
            }

            var response = await Http.PostAsJsonAsync("api/register/teacher", registerRequest);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<RegisterResponse>();
                if (result?.Success == true)
                {
                    successMessage = "Registration successful! You can now login with your credentials.";
                    registerRequest = new(); // Clear form
                    // Switch to login tab
                    isLoginTab = true;
                }
                else
                {
                    errorMessage = result?.Message ?? "Registration failed";
                }
            }
            else
            {
                var errorResult = await response.Content.ReadFromJsonAsync<RegisterResponse>();
                errorMessage = errorResult?.Message ?? "Registration failed";
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred during registration. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadRegions()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<string>>("api/register/regions");
            regions = response ?? new List<string>();
        }
        catch (Exception)
        {
            // Handle error silently for now
        }
    }

    private async Task OnRegionChanged()
    {
        registerRequest.Division = "";
        registerRequest.District = "";
        divisions.Clear();
        districts.Clear();

        Console.WriteLine($"Region changed to: '{registerRequest.Region}'");
        Console.WriteLine($"Region length: {registerRequest.Region?.Length}");
        Console.WriteLine($"Region bytes: {System.Text.Encoding.UTF8.GetBytes(registerRequest.Region ?? "")}");
        Console.WriteLine($"Region == 'manual': {registerRequest.Region == "manual"}");
        Console.WriteLine($"Region equals 'manual': {string.Equals(registerRequest.Region, "manual", StringComparison.Ordinal)}");

        if (!string.IsNullOrEmpty(registerRequest.Region) && registerRequest.Region != "manual")
        {
            Console.WriteLine($"Loading divisions for region: '{registerRequest.Region}'");
            await LoadDivisions(registerRequest.Region);
        }
        else
        {
            Console.WriteLine("Region is empty or manual, not loading divisions");
        }
        
        StateHasChanged();
    }

    private async Task OnDivisionChanged()
    {
        registerRequest.District = "";
        districts.Clear();

        Console.WriteLine($"Division changed to: {registerRequest.Division}");

        if (!string.IsNullOrEmpty(registerRequest.Division) && registerRequest.Division != "manual")
        {
            Console.WriteLine($"Loading districts for division: {registerRequest.Division}");
            await LoadDistricts(registerRequest.Division);
        }
        else
        {
            Console.WriteLine("Division is empty or manual, not loading districts");
        }
        
        StateHasChanged();
    }

    private void OnDistrictChanged()
    {
        Console.WriteLine($"District changed to: {registerRequest.District}");
        Console.WriteLine($"District == 'manual': {registerRequest.District == "manual"}");
        StateHasChanged();
    }

    private void OnGradeLevelChanged()
    {
        // Clear strand if grade level is not 11 or 12
        if (registerRequest.GradeLevel != 11 && registerRequest.GradeLevel != 12)
        {
            registerRequest.Strand = null;
        }
        StateHasChanged();
    }

    private async Task OnSchoolNameChanged(ChangeEventArgs e)
    {
        var schoolName = e.Value?.ToString()?.ToUpper() ?? "";
        registerRequest.SchoolName = schoolName;

        if (string.IsNullOrEmpty(schoolName) || schoolName.Length < 2)
        {
            schoolSuggestions.Clear();
            showSchoolSuggestions = false;
        }
        else
        {
            await LoadSchoolSuggestions(schoolName);
        }
        
        StateHasChanged();
    }

    private void SelectSchool(string schoolName)
    {
        registerRequest.SchoolName = schoolName.ToUpper();
        schoolSuggestions.Clear();
        showSchoolSuggestions = false;
        StateHasChanged();
    }

    private async Task LoadSchoolSuggestions(string schoolName)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<SchoolInfo>>($"api/register/schools/search?name={Uri.EscapeDataString(schoolName)}");
            schoolSuggestions = response?.Take(5).ToList() ?? new List<SchoolInfo>();
            showSchoolSuggestions = schoolSuggestions.Any();
        }
        catch (Exception)
        {
            schoolSuggestions.Clear();
            showSchoolSuggestions = false;
        }
    }

    private void HideSchoolSuggestions()
    {
        showSchoolSuggestions = false;
        StateHasChanged();
    }

    private async Task LoadDivisions(string region)
    {
        try
        {
            Console.WriteLine($"Loading divisions for region: {region}");
            var url = $"api/register/divisions/{Uri.EscapeDataString(region)}";
            Console.WriteLine($"API URL: {url}");
            Console.WriteLine($"HttpClient BaseAddress: {Http.BaseAddress}");
            Console.WriteLine($"Full URL: {Http.BaseAddress}{url}");
            
            var response = await Http.GetFromJsonAsync<List<string>>(url);
            divisions = response ?? new List<string>();
            Console.WriteLine($"Loaded {divisions.Count} divisions: {string.Join(", ", divisions)}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading divisions: {ex.Message}");
            Console.WriteLine($"Exception details: {ex}");
            divisions = new List<string>();
        }
    }

    private async Task LoadDistricts(string division)
    {
        try
        {
            Console.WriteLine($"Loading districts for division: {division}");
            var url = $"api/register/districts/{Uri.EscapeDataString(division)}";
            Console.WriteLine($"API URL: {url}");
            Console.WriteLine($"HttpClient BaseAddress: {Http.BaseAddress}");
            Console.WriteLine($"Full URL: {Http.BaseAddress}{url}");
            
            var response = await Http.GetFromJsonAsync<List<string>>(url);
            districts = response ?? new List<string>();
            Console.WriteLine($"Loaded {districts.Count} districts: {string.Join(", ", districts)}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading districts: {ex.Message}");
            Console.WriteLine($"Exception details: {ex}");
            districts = new List<string>();
        }
    }
}
